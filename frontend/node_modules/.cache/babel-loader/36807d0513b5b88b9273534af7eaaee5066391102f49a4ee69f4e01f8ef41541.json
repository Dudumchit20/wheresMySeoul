{"ast":null,"code":"import React,{useState,useEffect}from'react';import'./HotPlace.css';import{jsxs as _jsxs,jsx as _jsx}from\"react/jsx-runtime\";const SEOUL_OPEN_DATA_AUTH_KEY_=\"515653596b79756a38384a77506645\";// 서울 열린 데이터\n// 1부터 115까지 \"POI001\", \"POI002\", ..., \"POI115\" 형식의 리스트 생성\nconst AREA_CODES=Array.from({length:115},(_,index)=>{const number=(index+1).toString().padStart(3,'0');// 3자리 숫자로 포맷\nreturn\"POI\".concat(number);});function HotPlaces(){const[hotPlaces,setHotPlaces]=useState([]);const fetchHotPlaces=async()=>{// 결과를 저장할 배열을 초기화합니다.\nconst results=[];// 각 장소에 대한 비동기적인 혼잡도 데이터를 가져옵니다.\nconst fetchPromises=AREA_CODES.map(async code=>{try{const response=await fetch(\"http://openapi.seoul.go.kr:8088/\".concat(SEOUL_OPEN_DATA_AUTH_KEY_,\"/json/citydata_ppltn/1/5/\").concat(code));const data=await response.json();const personData=data['SeoulRtd.citydata_ppltn']['0'];// 안전하게 인덱스에 접근\nif(personData){// 인구 최소 및 최대값을 숫자로 변환하여 평균을 계산합니다.\nconst minPopulation=parseInt(personData.AREA_PPLTN_MIN,10);const maxPopulation=parseInt(personData.AREA_PPLTN_MAX,10);const avgPopulation=(minPopulation+maxPopulation)/2;// 해당 핫플레이스의 데이터를 객체로 저장하여 결과 배열에 추가합니다.\nresults.push({AREA_NM:personData.AREA_NM,AREA_CD:personData.AREA_CD,LIVE_PPLTN_STTS:avgPopulation,AREA_CONGEST_MSG:personData.AREA_CONGEST_MSG,AREA_PPLTN_MIN:minPopulation,AREA_PPLTN_MAX:maxPopulation});}}catch(error){console.error(\"Error fetching data for \".concat(code,\":\"),error);}});// 모든 비동기 요청이 완료될 때까지 기다립니다.\nawait Promise.all(fetchPromises);// 혼잡도 기준으로 정렬하여 상위 5개의 핫플레이스만 추출합니다.\nconst topHotPlaces=results.sort((a,b)=>b.LIVE_PPLTN_STTS-a.LIVE_PPLTN_STTS).slice(0,5);// 상태 업데이트\nsetHotPlaces(topHotPlaces);};useEffect(()=>{fetchHotPlaces();},[]);return/*#__PURE__*/_jsx(\"ul\",{className:\"hot-places-list\",children:hotPlaces.map((place,index)=>/*#__PURE__*/_jsxs(\"li\",{className:\"hot-place-item\",children:[/*#__PURE__*/_jsxs(\"h3\",{children:[\"Top \",index+1,\" \",place.AREA_NM]}),/*#__PURE__*/_jsx(\"p\",{className:\"top_title\",children:\" \\uC2E4\\uC2DC\\uAC04 \\uC778\\uAD6C \\uD604\\uD669 \"}),/*#__PURE__*/_jsxs(\"p\",{className:\"top_content\",children:[place.LIVE_PPLTN_STTS,\" \\uBA85\"]}),/*#__PURE__*/_jsx(\"p\",{className:\"top_title\",children:\" \\uC7A5\\uC18C \\uD63C\\uC7A1\\uB3C4 \"}),/*#__PURE__*/_jsx(\"p\",{className:\"top_content\",children:place.AREA_CONGEST_MSG})]},place.AREA_CD))});}export default HotPlaces;","map":{"version":3,"names":["React","useState","useEffect","jsxs","_jsxs","jsx","_jsx","SEOUL_OPEN_DATA_AUTH_KEY_","AREA_CODES","Array","from","length","_","index","number","toString","padStart","concat","HotPlaces","hotPlaces","setHotPlaces","fetchHotPlaces","results","fetchPromises","map","code","response","fetch","data","json","personData","minPopulation","parseInt","AREA_PPLTN_MIN","maxPopulation","AREA_PPLTN_MAX","avgPopulation","push","AREA_NM","AREA_CD","LIVE_PPLTN_STTS","AREA_CONGEST_MSG","error","console","Promise","all","topHotPlaces","sort","a","b","slice","className","children","place"],"sources":["/Users/p_kxn_g/Documents/GitHub/wheresMySeoul/frontend/awes/src/hotPlace/HotPlace.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './HotPlace.css';\n\nconst SEOUL_OPEN_DATA_AUTH_KEY_= \"515653596b79756a38384a77506645\" // 서울 열린 데이터\n\n// 1부터 115까지 \"POI001\", \"POI002\", ..., \"POI115\" 형식의 리스트 생성\nconst AREA_CODES = Array.from({ length: 115 }, (_, index) => {\n    const number = (index + 1).toString().padStart(3, '0'); // 3자리 숫자로 포맷\n    return `POI${number}`;\n  });\nfunction HotPlaces() {\n  const [hotPlaces, setHotPlaces] = useState([]);\n  \n  const fetchHotPlaces = async () => {\n    // 결과를 저장할 배열을 초기화합니다.\n    const results = [];\n  \n    // 각 장소에 대한 비동기적인 혼잡도 데이터를 가져옵니다.\n    const fetchPromises = AREA_CODES.map(async (code) => {\n      try {\n        const response = await fetch(`http://openapi.seoul.go.kr:8088/${SEOUL_OPEN_DATA_AUTH_KEY_}/json/citydata_ppltn/1/5/${code}`);\n        const data = await response.json();\n        const personData = data['SeoulRtd.citydata_ppltn']['0']; // 안전하게 인덱스에 접근\n        if (personData) {\n          // 인구 최소 및 최대값을 숫자로 변환하여 평균을 계산합니다.\n          const minPopulation = parseInt(personData.AREA_PPLTN_MIN, 10);\n          const maxPopulation = parseInt(personData.AREA_PPLTN_MAX, 10);\n          const avgPopulation = (minPopulation + maxPopulation) / 2;\n  \n          // 해당 핫플레이스의 데이터를 객체로 저장하여 결과 배열에 추가합니다.\n          results.push({\n            AREA_NM: personData.AREA_NM,\n            AREA_CD: personData.AREA_CD,\n            LIVE_PPLTN_STTS: avgPopulation,\n            AREA_CONGEST_MSG: personData.AREA_CONGEST_MSG,\n            AREA_PPLTN_MIN: minPopulation,\n            AREA_PPLTN_MAX: maxPopulation,\n          });\n        }\n      } catch (error) {\n        console.error(`Error fetching data for ${code}:`, error);\n      }\n    });\n  \n    // 모든 비동기 요청이 완료될 때까지 기다립니다.\n    await Promise.all(fetchPromises);\n  \n    // 혼잡도 기준으로 정렬하여 상위 5개의 핫플레이스만 추출합니다.\n    const topHotPlaces = results\n      .sort((a, b) => b.LIVE_PPLTN_STTS - a.LIVE_PPLTN_STTS)\n      .slice(0, 5);\n  \n    // 상태 업데이트\n    setHotPlaces(topHotPlaces);\n  \n  };\n\n  useEffect(() => {\n    fetchHotPlaces();\n  }, []);\n\n  return (\n      <ul className=\"hot-places-list\">\n        {hotPlaces.map((place, index) => (\n          <li key={place.AREA_CD} className=\"hot-place-item\">\n            <h3>Top {index + 1} {place.AREA_NM}</h3>\n            <p className='top_title'> 실시간 인구 현황 </p>\n            <p className='top_content'>{place.LIVE_PPLTN_STTS} 명</p>\n            <p className='top_title'> 장소 혼잡도 </p>\n            <p className='top_content'>{place.AREA_CONGEST_MSG}</p>\n            {/* <p className='top_title'> 최소 인구 </p>\n            <p className='top_content'>{place.AREA_PPLTN_MIN}</p>\n            <p className='top_title'> 최대 인구 </p>\n            <p className='top_content'>{place.AREA_PPLTN_MAX}</p> */}\n          \n          </li>\n        ))}\n      </ul>\n  );\n}\n\nexport default HotPlaces;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}