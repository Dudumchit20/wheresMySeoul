{"ast":null,"code":"var _jsxFileName = \"/Users/p_kxn_g/Documents/GitHub/wheresMySeoul/frontend/awes/src/language/LanguageContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/language/LanguageContext.js\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LanguageContext = /*#__PURE__*/createContext();\nexport const useLanguage = () => {\n  _s();\n  return useContext(LanguageContext);\n};\n_s(useLanguage, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const LanguageProvider = ({\n  children\n}) => {\n  _s2();\n  const [language, setLanguage] = useState('ko');\n  const [translatedText, setTranslatedText] = useState({\n    title: \"서울을 찾아서\",\n    subtitle: \"숨겨진 서울의 모습 찾아서, AI 기반 관광 추천 서비스\",\n    weatherToday: \"오늘의 관광날씨는?\",\n    hotPlacesTop5: \"서울의 핫플 Top5\",\n    findNearby: \"주변 관광지 찾아보기\",\n    recommendTour: \"관광 코스 추천 받기\",\n    numPlaces: \"장소의 갯수를 선택해주세요\",\n    selectCategory: \"원하는 분류를 선택해주세요 (복수선택 가능)\",\n    buttonGetRecommendation: \"추천 받기\",\n    footer: \"대표 이메일 : dudumchit2023@gmail.com\\nCopyright © 서로감자\"\n  });\n\n  // API 키를 실제 프로젝트 키로 대체하세요.\n  const apiKey = 'AIzaSyCoBqm6ZJlc2QRPAEZ8Op36nAklnfj5DsE'; // Replace with your actual key\n  const translateApiUrl = `https://translation.googleapis.com/language/translate/v2?key=${apiKey}`;\n  const translateText = async (text, targetLang) => {\n    try {\n      var _data$data, _data$data$translatio, _data$data$translatio2;\n      const response = await fetch(translateApiUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          q: text,\n          target: targetLang\n        })\n      });\n      const data = await response.json();\n      if (data !== null && data !== void 0 && (_data$data = data.data) !== null && _data$data !== void 0 && (_data$data$translatio = _data$data.translations) !== null && _data$data$translatio !== void 0 && (_data$data$translatio2 = _data$data$translatio[0]) !== null && _data$data$translatio2 !== void 0 && _data$data$translatio2.translatedText) {\n        return data.data.translations[0].translatedText;\n      } else {\n        throw new Error('No translation data found');\n      }\n    } catch (error) {\n      console.error('Error translating text:', error);\n      return text; // 에러 시 원본 텍스트 반환\n    }\n  };\n  const translateAllTexts = async lang => {\n    const texts = [\"서울을 찾아서\", \"숨겨진 서울의 모습 찾아서, AI 기반 관광 추천 서비스\", \"오늘의 관광날씨는?\", \"서울의 핫플 Top5\", \"주변 관광지 찾아보기\", \"관광 코스 추천 받기\", \"장소의 갯수를 선택해주세요\", \"원하는 분류를 선택해주세요 (복수선택 가능)\", \"추천 받기\", \"대표 이메일 : dudumchit2023@gmail.com\\nCopyright © 서로감자\"];\n    const keys = [\"title\", \"subtitle\", \"weatherToday\", \"hotPlacesTop5\", \"findNearby\", \"recommendTour\", \"numPlaces\", \"selectCategory\", \"buttonGetRecommendation\", \"footer\"];\n    const translatedTexts = await Promise.all(texts.map(text => translateText(text, lang)));\n    const newTranslatedText = keys.reduce((acc, key, index) => {\n      acc[key] = translatedTexts[index];\n      return acc;\n    }, {});\n    setTranslatedText(newTranslatedText);\n  };\n  useEffect(() => {\n    translateAllTexts(language);\n  }, [language]);\n  const toggleLanguage = lang => {\n    setLanguage(lang);\n  };\n  return /*#__PURE__*/_jsxDEV(LanguageContext.Provider, {\n    value: {\n      language,\n      translatedText,\n      toggleLanguage\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n_s2(LanguageProvider, \"ckUUFe4VMhmHPxmG/HHU3JnmbQY=\");\n_c = LanguageProvider;\nvar _c;\n$RefreshReg$(_c, \"LanguageProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","LanguageContext","useLanguage","_s","LanguageProvider","children","_s2","language","setLanguage","translatedText","setTranslatedText","title","subtitle","weatherToday","hotPlacesTop5","findNearby","recommendTour","numPlaces","selectCategory","buttonGetRecommendation","footer","apiKey","translateApiUrl","translateText","text","targetLang","_data$data","_data$data$translatio","_data$data$translatio2","response","fetch","method","headers","body","JSON","stringify","q","target","data","json","translations","Error","error","console","translateAllTexts","lang","texts","keys","translatedTexts","Promise","all","map","newTranslatedText","reduce","acc","key","index","toggleLanguage","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/p_kxn_g/Documents/GitHub/wheresMySeoul/frontend/awes/src/language/LanguageContext.js"],"sourcesContent":["// src/language/LanguageContext.js\nimport React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst LanguageContext = createContext();\n\nexport const useLanguage = () => useContext(LanguageContext);\n\nexport const LanguageProvider = ({ children }) => {\n  const [language, setLanguage] = useState('ko');\n  const [translatedText, setTranslatedText] = useState({\n    title: \"서울을 찾아서\",\n    subtitle: \"숨겨진 서울의 모습 찾아서, AI 기반 관광 추천 서비스\",\n    weatherToday: \"오늘의 관광날씨는?\",\n    hotPlacesTop5: \"서울의 핫플 Top5\",\n    findNearby: \"주변 관광지 찾아보기\",\n    recommendTour: \"관광 코스 추천 받기\",\n    numPlaces: \"장소의 갯수를 선택해주세요\",\n    selectCategory: \"원하는 분류를 선택해주세요 (복수선택 가능)\",\n    buttonGetRecommendation: \"추천 받기\",\n    footer: \"대표 이메일 : dudumchit2023@gmail.com\\nCopyright © 서로감자\",\n  });\n\n  // API 키를 실제 프로젝트 키로 대체하세요.\n  const apiKey = 'AIzaSyCoBqm6ZJlc2QRPAEZ8Op36nAklnfj5DsE'; // Replace with your actual key\n  const translateApiUrl = `https://translation.googleapis.com/language/translate/v2?key=${apiKey}`;\n\n  const translateText = async (text, targetLang) => {\n    try {\n      const response = await fetch(translateApiUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          q: text,\n          target: targetLang\n        })\n      });\n\n      const data = await response.json();\n\n      if (data?.data?.translations?.[0]?.translatedText) {\n        return data.data.translations[0].translatedText;\n      } else {\n        throw new Error('No translation data found');\n      }\n\n    } catch (error) {\n      console.error('Error translating text:', error);\n      return text; // 에러 시 원본 텍스트 반환\n    }\n  };\n\n  const translateAllTexts = async (lang) => {\n    const texts = [\n      \"서울을 찾아서\", \"숨겨진 서울의 모습 찾아서, AI 기반 관광 추천 서비스\",\n      \"오늘의 관광날씨는?\", \"서울의 핫플 Top5\", \"주변 관광지 찾아보기\",\n      \"관광 코스 추천 받기\", \"장소의 갯수를 선택해주세요\", \"원하는 분류를 선택해주세요 (복수선택 가능)\",\n      \"추천 받기\", \"대표 이메일 : dudumchit2023@gmail.com\\nCopyright © 서로감자\"\n    ];\n\n    const keys = [\n      \"title\", \"subtitle\", \"weatherToday\", \"hotPlacesTop5\", \"findNearby\",\n      \"recommendTour\", \"numPlaces\", \"selectCategory\", \"buttonGetRecommendation\", \"footer\"\n    ];\n\n    const translatedTexts = await Promise.all(\n      texts.map(text => translateText(text, lang))\n    );\n\n    const newTranslatedText = keys.reduce((acc, key, index) => {\n      acc[key] = translatedTexts[index];\n      return acc;\n    }, {});\n\n    setTranslatedText(newTranslatedText);\n  };\n\n  useEffect(() => {\n    translateAllTexts(language);\n  }, [language]);\n\n  const toggleLanguage = (lang) => {\n    setLanguage(lang);\n  };\n\n  return (\n    <LanguageContext.Provider value={{ language, translatedText, toggleLanguage }}>\n      {children}\n    </LanguageContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}