{"ast":null,"code":"var _jsxFileName = \"/Users/p_kxn_g/Documents/GitHub/wheresMySeoul/frontend/awes/src/TextField.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { setKey, fromLatLng, fromAddress } from 'react-geocode';\nimport WeatherComponent from './weather/weather';\nimport './TextField.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GOOGLE_MAPS_API_KEY = 'AIzaSyCoBqm6ZJlc2QRPAEZ8Op36nAklnfj5DsE'; // Replace with your actual key\nconst SEOUL_OPEN_DATA_AUTH_KEY = \"515653596b79756a38384a77506645\"; // 서울 열린 데이터\n\nsetKey(GOOGLE_MAPS_API_KEY);\nconst touristSpots = [{\n  name: \"강남 MICE 관광특구\",\n  latitude: 37.5139,\n  longitude: 127.0581\n}, {\n  name: \"동대문 관광특구\",\n  latitude: 37.5711,\n  longitude: 127.0094\n}, {\n  name: \"명동 관광특구\",\n  latitude: 37.5637,\n  longitude: 126.9857\n}, {\n  name: \"이태원 관광특구\",\n  latitude: 37.5345,\n  longitude: 126.9937\n}\n// 추가적인 관광특구들...\n];\nfunction calculateDistance(lat1, lon1, lat2, lon2) {\n  const R = 6371; // 지구 반경 (km)\n  const dLat = (lat2 - lat1) * (Math.PI / 180);\n  const dLon = (lon2 - lon1) * (Math.PI / 180);\n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1 * (Math.PI / 180)) * Math.cos(lat2 * (Math.PI / 180)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c; // 거리 (km)\n}\nfunction findClosestTouristSpot(latitude, longitude) {\n  let closestSpot = touristSpots[0];\n  let minDistance = calculateDistance(latitude, longitude, closestSpot.latitude, closestSpot.longitude);\n  for (const spot of touristSpots) {\n    const distance = calculateDistance(latitude, longitude, spot.latitude, spot.longitude);\n    if (distance < minDistance) {\n      closestSpot = spot;\n      minDistance = distance;\n    }\n  }\n  return closestSpot;\n}\nfunction LocationSearchField({\n  setWeatherData\n}) {\n  _s();\n  const inputStyle = {\n    color: 'black',\n    border: '0px solid gray',\n    borderRadius: '5px',\n    width: '100%',\n    height: '40px',\n    margin: '0px 10px',\n    outline: 'none'\n  };\n  const textFieldStyle = {\n    flex: 1,\n    fontSize: '20px',\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center'\n  };\n  const [inputValue, setInputValue] = useState('');\n  const [currentLocation, setCurrentLocation] = useState('');\n  const [closestTouristSpot, setClosestTouristSpot] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        fromLatLng(latitude, longitude).then(({\n          results\n        }) => {\n          if (results && results.length > 0) {\n            const address = results[0].formatted_address;\n            setCurrentLocation(address);\n            setInputValue(address);\n          } else {\n            setInputValue('Unable to find address.');\n          }\n          const closestSpot = findClosestTouristSpot(latitude, longitude);\n          setClosestTouristSpot(closestSpot.name);\n          fetchWeatherData(closestSpot.name);\n        }).catch(error => {\n          console.error('Geocoding error:', error);\n          setInputValue('Geocoding error.');\n        });\n      }, error => {\n        console.error('Geolocation error:', error);\n        setInputValue('Location access denied.');\n      });\n    } else {\n      setInputValue('Geolocation not supported.');\n    }\n  }, []);\n  const fetchWeatherData = async spotName => {\n    try {\n      // console.log(\"log---[관광특구 확인]\", spotName);\n      const response = await fetch(`http://openapi.seoul.go.kr:8088/${SEOUL_OPEN_DATA_AUTH_KEY}/json/citydata/131/168/${spotName}`);\n      const data = await response.json();\n      console.log(\"log---[관광특구 날씨 받기 확인]\", data);\n\n      // 데이터 구조에 맞게 날씨 상태 추출\n      const weatherStats = data.CITYDATA.WEATHER_STTS[0];\n\n      // PRECIPITATION : 강수량\n      const precipitation = weatherStats.PRECIPITATION;\n      // TEMP : 기온\n      const temperature = weatherStats.TEMP;\n      // HUMIDITY : 습도\n      const humidity = weatherStats.HUMIDITY;\n      // WIND_SPD : 풍속\n      const windSpeed = weatherStats.WIND_SPD;\n      // PCP_MSG : 강수 메세지 (비가 올 확률을 강수 메세지로 대체, 명확한 확률 정보가 없는 경우)\n      const mes_rain = weatherStats.PCP_MSG;\n      // UV_MSG : 자외선 메세지\n      const mes_uv = weatherStats.UV_MSG;\n      // AIR_MSG : 대기 메세지\n      const mes_air = weatherStats.AIR_MSG;\n\n      // 날씨 데이터 설정\n      setWeatherData({\n        temperature: temperature,\n        precipitation: precipitation,\n        humidity: humidity,\n        windSpeed: windSpeed,\n        mes_rain: mes_rain,\n        mes_uv: mes_uv,\n        mes_air: mes_air\n      });\n    } catch (error) {\n      console.error('Error fetching weather data:', error);\n    }\n  };\n  const handleSearch = () => {\n    fromAddress(inputValue).then(({\n      results\n    }) => {\n      if (results && results.length > 0) {\n        setSearchResults(results);\n        const {\n          location\n        } = results[0].geometry;\n        const closestSpot = findClosestTouristSpot(location.lat, location.lng);\n        setClosestTouristSpot(closestSpot.name);\n        fetchWeatherData(closestSpot.name);\n      } else {\n        setSearchResults([{\n          formatted_address: '주소를 찾지 못했습니다.'\n        }]);\n      }\n    }).catch(error => {\n      console.error('Geocoding error:', error);\n      setSearchResults([{\n        formatted_address: '주소를 찾지 못했습니다.'\n      }]);\n    });\n  };\n  const handleChange = event => {\n    setInputValue(event.target.value);\n  };\n  const handleKeyPress = event => {\n    if (event.key === 'Enter') {\n      handleSearch();\n    }\n  };\n  const handleClear = () => {\n    setInputValue('');\n    setCurrentLocation('');\n    setSearchResults([]);\n  };\n  const handleSuggestionClick = address => {\n    setInputValue(address);\n    setSearchResults([]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weather_container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container_row_left\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\uD604\\uC7AC \\uC704\\uCE58\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"\\uD604\\uC7AC \\uC704\\uCE58 \\uD639\\uC740 \\uC6D0\\uD558\\uB294 \\uC704\\uCE58\\uB97C \\uAE30\\uBC18\\uC73C\\uB85C \\uC11C\\uBE44\\uC2A4\\uB97C \\uC81C\\uACF5\\uD569\\uB2C8\\uB2E4.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"textfield_container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"location_button\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"button_none\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"/png/search.png\",\n              alt: \"search\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: textFieldStyle,\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: inputValue,\n              onChange: handleChange,\n              onKeyPress: handleKeyPress,\n              style: inputStyle,\n              placeholder: \"\\uD604\\uC7AC \\uC704\\uCE58 \\uD639\\uC740 \\uC6D0\\uD558\\uB294 \\uC704\\uCE58\\uB97C \\uAC80\\uC0C9\\uD574\\uBCF4\\uC138\\uC694\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"button_none\",\n              onClick: handleClear,\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: \"/png/close.png\",\n                alt: \"close\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 206,\n                columnNumber: 13\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 7\n        }, this), searchResults.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"results_dropdown\",\n          children: searchResults.map((result, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"result_row\",\n            onClick: result.formatted_address !== '주소를 찾지 못했습니다.' ? () => handleSuggestionClick(result.formatted_address) : null,\n            children: result.formatted_address\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 13\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 5\n    }, this), closestTouristSpot && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"closest_spot_info\",\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"\\uAC00\\uC7A5 \\uAC00\\uAE4C\\uC6B4 \\uAD00\\uAD11\\uD2B9\\uAD6C - \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 13\n      }, this), \"  \", closestTouristSpot]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 5\n  }, this);\n}\n_s(LocationSearchField, \"1deJlOydhcRLdhjZxGEp/pppALE=\");\n_c = LocationSearchField;\nexport default LocationSearchField;\nvar _c;\n$RefreshReg$(_c, \"LocationSearchField\");","map":{"version":3,"names":["React","useState","useEffect","setKey","fromLatLng","fromAddress","WeatherComponent","jsxDEV","_jsxDEV","GOOGLE_MAPS_API_KEY","SEOUL_OPEN_DATA_AUTH_KEY","touristSpots","name","latitude","longitude","calculateDistance","lat1","lon1","lat2","lon2","R","dLat","Math","PI","dLon","a","sin","cos","c","atan2","sqrt","findClosestTouristSpot","closestSpot","minDistance","spot","distance","LocationSearchField","setWeatherData","_s","inputStyle","color","border","borderRadius","width","height","margin","outline","textFieldStyle","flex","fontSize","display","flexDirection","alignItems","inputValue","setInputValue","currentLocation","setCurrentLocation","closestTouristSpot","setClosestTouristSpot","searchResults","setSearchResults","navigator","geolocation","getCurrentPosition","position","coords","then","results","length","address","formatted_address","fetchWeatherData","catch","error","console","spotName","response","fetch","data","json","log","weatherStats","CITYDATA","WEATHER_STTS","precipitation","PRECIPITATION","temperature","TEMP","humidity","HUMIDITY","windSpeed","WIND_SPD","mes_rain","PCP_MSG","mes_uv","UV_MSG","mes_air","AIR_MSG","handleSearch","location","geometry","lat","lng","handleChange","event","target","value","handleKeyPress","key","handleClear","handleSuggestionClick","children","className","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","style","type","onChange","onKeyPress","placeholder","onClick","map","result","index","_c","$RefreshReg$"],"sources":["/Users/p_kxn_g/Documents/GitHub/wheresMySeoul/frontend/awes/src/TextField.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { setKey, fromLatLng, fromAddress } from 'react-geocode';\nimport WeatherComponent from './weather/weather';\nimport './TextField.css';\n\nconst GOOGLE_MAPS_API_KEY = 'AIzaSyCoBqm6ZJlc2QRPAEZ8Op36nAklnfj5DsE'; // Replace with your actual key\nconst SEOUL_OPEN_DATA_AUTH_KEY = \"515653596b79756a38384a77506645\"; // 서울 열린 데이터\n\nsetKey(GOOGLE_MAPS_API_KEY);\n\nconst touristSpots = [\n  { name: \"강남 MICE 관광특구\", latitude: 37.5139, longitude: 127.0581 },\n  { name: \"동대문 관광특구\", latitude: 37.5711, longitude: 127.0094 },\n  { name: \"명동 관광특구\", latitude: 37.5637, longitude: 126.9857 },\n  { name: \"이태원 관광특구\", latitude: 37.5345, longitude: 126.9937 },\n  // 추가적인 관광특구들...\n];\n\nfunction calculateDistance(lat1, lon1, lat2, lon2) {\n  const R = 6371; // 지구 반경 (km)\n  const dLat = (lat2 - lat1) * (Math.PI / 180);\n  const dLon = (lon2 - lon1) * (Math.PI / 180);\n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n            Math.cos(lat1 * (Math.PI / 180)) * Math.cos(lat2 * (Math.PI / 180)) *\n            Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c; // 거리 (km)\n}\n\nfunction findClosestTouristSpot(latitude, longitude) {\n  let closestSpot = touristSpots[0];\n  let minDistance = calculateDistance(latitude, longitude, closestSpot.latitude, closestSpot.longitude);\n\n  for (const spot of touristSpots) {\n    const distance = calculateDistance(latitude, longitude, spot.latitude, spot.longitude);\n    if (distance < minDistance) {\n      closestSpot = spot;\n      minDistance = distance;\n    }\n  }\n\n  return closestSpot;\n}\n\nfunction LocationSearchField({setWeatherData}) {\n  const inputStyle = {\n    color: 'black',\n    border: '0px solid gray',\n    borderRadius: '5px',\n    width: '100%',\n    height: '40px',\n    margin: '0px 10px',\n    outline: 'none',\n  };\n\n  const textFieldStyle = {\n    flex: 1,\n    fontSize: '20px',\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n  };\n\n  const [inputValue, setInputValue] = useState('');\n  const [currentLocation, setCurrentLocation] = useState('');\n  const [closestTouristSpot, setClosestTouristSpot] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const { latitude, longitude } = position.coords;\n          fromLatLng(latitude, longitude)\n            .then(({ results }) => {\n              if (results && results.length > 0) {\n                const address = results[0].formatted_address;\n                setCurrentLocation(address);\n                setInputValue(address);\n              } else {\n                setInputValue('Unable to find address.');\n              }\n              const closestSpot = findClosestTouristSpot(latitude, longitude);\n              setClosestTouristSpot(closestSpot.name);\n              fetchWeatherData(closestSpot.name);\n            })\n            .catch((error) => {\n              console.error('Geocoding error:', error);\n              setInputValue('Geocoding error.');\n            });\n        },\n        (error) => {\n          console.error('Geolocation error:', error);\n          setInputValue('Location access denied.');\n        }\n      );\n    } else {\n      setInputValue('Geolocation not supported.');\n    }\n  }, []);\n\n  const fetchWeatherData = async (spotName) => {\n    try {\n      // console.log(\"log---[관광특구 확인]\", spotName);\n      const response = await fetch(`http://openapi.seoul.go.kr:8088/${SEOUL_OPEN_DATA_AUTH_KEY}/json/citydata/131/168/${spotName}`);\n      const data = await response.json();\n      console.log(\"log---[관광특구 날씨 받기 확인]\", data);\n  \n      // 데이터 구조에 맞게 날씨 상태 추출\n      const weatherStats = data.CITYDATA.WEATHER_STTS[0];\n\n      // PRECIPITATION : 강수량\n      const precipitation = weatherStats.PRECIPITATION\n      // TEMP : 기온\n      const temperature = weatherStats.TEMP;\n      // HUMIDITY : 습도\n      const humidity = weatherStats.HUMIDITY;\n      // WIND_SPD : 풍속\n      const windSpeed = weatherStats.WIND_SPD;\n      // PCP_MSG : 강수 메세지 (비가 올 확률을 강수 메세지로 대체, 명확한 확률 정보가 없는 경우)\n      const mes_rain = weatherStats.PCP_MSG;\n      // UV_MSG : 자외선 메세지\n      const mes_uv = weatherStats.UV_MSG;\n      // AIR_MSG : 대기 메세지\n      const mes_air = weatherStats.AIR_MSG;\n\n\n      // 날씨 데이터 설정\n      setWeatherData({\n        temperature: temperature,\n        precipitation: precipitation,\n        humidity: humidity,\n        windSpeed: windSpeed,\n        mes_rain: mes_rain,\n        mes_uv: mes_uv,\n        mes_air: mes_air,\n      });\n    } catch (error) {\n      console.error('Error fetching weather data:', error);\n    }\n  };\n  \n\n  const handleSearch = () => {\n    fromAddress(inputValue)\n      .then(({ results }) => {\n        if (results && results.length > 0) {\n          setSearchResults(results);\n          const { location } = results[0].geometry;\n          const closestSpot = findClosestTouristSpot(location.lat, location.lng);\n          setClosestTouristSpot(closestSpot.name);\n          fetchWeatherData(closestSpot.name);\n        } else {\n          setSearchResults([{ formatted_address: '주소를 찾지 못했습니다.' }]);\n        }\n      })\n      .catch((error) => {\n        console.error('Geocoding error:', error);\n        setSearchResults([{ formatted_address: '주소를 찾지 못했습니다.' }]);\n      });\n  };\n\n  const handleChange = (event) => {\n    setInputValue(event.target.value);\n  };\n\n  const handleKeyPress = (event) => {\n    if (event.key === 'Enter') {\n      handleSearch();\n    }\n  };\n\n  const handleClear = () => {\n    setInputValue('');\n    setCurrentLocation('');\n    setSearchResults([]);\n  };\n\n  const handleSuggestionClick = (address) => {\n    setInputValue(address);\n    setSearchResults([]);\n  };\n\n  return (\n    <div>\n    <div className=\"weather_container\">\n    <div className=\"container_row_left\">\n      <h2>현재 위치</h2> \n      <h5>현재 위치 혹은 원하는 위치를 기반으로 서비스를 제공합니다.</h5>\n    </div>\n      <div className='textfield_container'>\n      <div className=\"location_button\">\n        <button className=\"button_none\">\n          <img src=\"/png/search.png\" alt=\"search\" />\n        </button>\n        <div style={textFieldStyle}>\n          <input\n            type=\"text\"\n            value={inputValue}\n            onChange={handleChange}\n            onKeyPress={handleKeyPress}\n            style={inputStyle}\n            placeholder=\"현재 위치 혹은 원하는 위치를 검색해보세요\"\n          />\n          <button className=\"button_none\" onClick={handleClear}>\n            <img src=\"/png/close.png\" alt=\"close\" />\n          </button>\n        </div>\n      </div>\n     \n      {/* 검색 결과 표시 */}\n      {searchResults.length > 0 && (\n        <div className=\"results_dropdown\">\n          {searchResults.map((result, index) => (\n            <div\n              key={index}\n              className=\"result_row\"\n              onClick={\n                result.formatted_address !== '주소를 찾지 못했습니다.' ? () => handleSuggestionClick(result.formatted_address) : null\n              }\n            >\n              {result.formatted_address}\n            </div>\n          ))}\n        </div>\n      )}\n\n \n\n    </div>\n    </div>\n         {/* 가장 가까운 관광특구 표시 */}\n         {closestTouristSpot && (\n          <div className=\"closest_spot_info\">\n            <strong>가장 가까운 관광특구 - </strong>  {closestTouristSpot}\n          </div>\n        )}\n    </div>\n\n\n    \n  );\n}\n\nexport default LocationSearchField;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}