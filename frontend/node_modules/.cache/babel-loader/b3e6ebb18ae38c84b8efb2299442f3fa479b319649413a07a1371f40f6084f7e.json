{"ast":null,"code":"var _jsxFileName = \"/Users/p_kxn_g/Documents/GitHub/wheresMySeoul/frontend/awes/src/TextField.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Geocode from 'react-geocode';\nimport \"./Home.css\";\n\n// Google Maps API 키 설정\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nGeocode.setApiKey('AIzaSyCoBqm6ZJlc2QRPAEZ8Op36nAklnfj5DsE');\nGeocode.setLanguage('en');\nGeocode.setRegion('us');\nGeocode.enableDebug();\nfunction TextField() {\n  _s();\n  const inputStyle = {\n    color: \"black\",\n    border: \"0px solid gray\",\n    borderRadius: \"5px\",\n    width: \"100%\",\n    height: \"40px\",\n    margin: \"0px 10px\",\n    outline: \"none\"\n  };\n  const textFieldStyle = {\n    flex: 1,\n    fontSize: \"20px\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\"\n  };\n  const [inputValue, setInputValue] = useState('');\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n\n        // Google Maps API를 사용하여 역지오코딩 수행\n        Geocode.fromLatLng(latitude.toString(), longitude.toString()).then(response => {\n          const address = response.results[0].formatted_address;\n          setInputValue(address);\n        }, error => {\n          console.error('Error during geocoding:', error);\n          setInputValue(\"Geocoding error.\");\n        });\n      }, error => {\n        console.error('Geolocation error:', error);\n        setInputValue(\"Location access denied.\");\n      });\n    } else {\n      setInputValue(\"Geolocation not supported.\");\n    }\n  }, []);\n  const handleChange = event => {\n    setInputValue(event.target.value);\n  };\n  const handleClear = () => {\n    setInputValue('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: textFieldStyle,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: inputValue,\n      onChange: handleChange,\n      style: inputStyle,\n      placeholder: \"\\uC6D0\\uD558\\uB294 \\uC8FC\\uC18C\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button_none\",\n      onClick: handleClear,\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"/png/close.png\",\n        alt: \"close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n_s(TextField, \"g3WCsqcvSc9WB7w4du2ucRdqd7Y=\");\n_c = TextField;\nexport default TextField;\nvar _c;\n$RefreshReg$(_c, \"TextField\");","map":{"version":3,"names":["React","useState","useEffect","Geocode","jsxDEV","_jsxDEV","setApiKey","setLanguage","setRegion","enableDebug","TextField","_s","inputStyle","color","border","borderRadius","width","height","margin","outline","textFieldStyle","flex","fontSize","display","flexDirection","alignItems","inputValue","setInputValue","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","fromLatLng","toString","then","response","address","results","formatted_address","error","console","handleChange","event","target","value","handleClear","style","children","type","onChange","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","src","alt","_c","$RefreshReg$"],"sources":["/Users/p_kxn_g/Documents/GitHub/wheresMySeoul/frontend/awes/src/TextField.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Geocode from 'react-geocode';\nimport \"./Home.css\";\n\n// Google Maps API 키 설정\nGeocode.setApiKey('AIzaSyCoBqm6ZJlc2QRPAEZ8Op36nAklnfj5DsE');\nGeocode.setLanguage('en');\nGeocode.setRegion('us');\nGeocode.enableDebug();\n\nfunction TextField() {\n  const inputStyle = {\n    color: \"black\",\n    border: \"0px solid gray\",\n    borderRadius: \"5px\",\n    width: \"100%\",\n    height: \"40px\",\n    margin: \"0px 10px\",\n    outline: \"none\"\n  };\n\n  const textFieldStyle = {\n    flex: 1,\n    fontSize: \"20px\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\"\n  };\n\n  const [inputValue, setInputValue] = useState('');\n\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition((position) => {\n        const { latitude, longitude } = position.coords;\n\n        // Google Maps API를 사용하여 역지오코딩 수행\n        Geocode.fromLatLng(latitude.toString(), longitude.toString()).then(\n          (response) => {\n            const address = response.results[0].formatted_address;\n            setInputValue(address);\n          },\n          (error) => {\n            console.error('Error during geocoding:', error);\n            setInputValue(\"Geocoding error.\");\n          }\n        );\n      }, (error) => {\n        console.error('Geolocation error:', error);\n        setInputValue(\"Location access denied.\");\n      });\n    } else {\n      setInputValue(\"Geolocation not supported.\");\n    }\n  }, []);\n\n  const handleChange = (event) => {\n    setInputValue(event.target.value);\n  };\n\n  const handleClear = () => {\n    setInputValue('');\n  };\n\n  return (\n    <div style={textFieldStyle}>\n      <input\n        type=\"text\"\n        value={inputValue}\n        onChange={handleChange}\n        style={inputStyle}\n        placeholder=\"원하는 주소를 입력해주세요\"\n      />\n      <button className=\"button_none\" onClick={handleClear}>\n        <img src=\"/png/close.png\" alt=\"close\" />\n      </button>\n    </div>\n  );\n}\n\nexport default TextField;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}