{"ast":null,"code":"var _jsxFileName = \"/Users/p_kxn_g/Documents/GitHub/wheresMySeoul/frontend/awes/src/hotPlace/Map.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { GoogleMap, LoadScript, Ad, InfoWindow, OverlayView, MarkerF, MarkerClusterer, Marker } from '@react-google-maps/api';\nimport \"./Map.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  width: '100%',\n  height: '400px'\n};\n\n// 서울의 초기 위치\nconst defaultCenter = {\n  lat: 37.5665,\n  lng: 126.9780\n};\n// 각 마커 유형에 따른 아이콘 색상 정의\nconst markerIcons = {\n  \"따릉이\": \"http://maps.google.com/mapfiles/ms/icons/green-dot.png\",\n  \"주차장\": \"http://maps.google.com/mapfiles/ms/icons/blue-dot.png\",\n  \"문화행사\": \"http://maps.google.com/mapfiles/ms/icons/red-dot.png\",\n  \"지하철\": \"http://maps.google.com/mapfiles/ms/icons/yellow-dot.png\"\n};\nconst Map = ({\n  inf1,\n  inf2,\n  inf3,\n  inf4\n}) => {\n  _s();\n  const [currentPosition, setCurrentPosition] = useState(defaultCenter);\n  const [markers, setMarkers] = useState([]);\n  const [activeMarker, setActiveMarker] = useState(null);\n  console.log(\"문화 정보:\", inf1);\n  console.log(\"주차장 정보:\", inf2);\n  console.log(\"지하철 정보:\", inf3);\n  console.log(\"자전거 정보:\", inf4);\n  useEffect(() => {\n    // 현재 위치를 설정\n    if ('geolocation' in navigator) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        setCurrentPosition({\n          lat: latitude,\n          lng: longitude\n        });\n        console.log(\"Current Position:\", latitude, longitude); // 현재 위치 로그 출력\n      }, () => {\n        console.error(\"Geolocation is not supported or permission denied.\");\n      });\n    } else {\n      console.error(\"Geolocation is not supported by this browser.\");\n    }\n  }, []);\n  useEffect(() => {\n    // 선택된 필터에 해당하는 목업 데이터를 마커로 설정\n    // const filteredMarkers = mockData.filter(item => selectedFilters.includes(item.type));\n    // setMarkers(filteredMarkers);\n  }, []);\n\n  // 마커 클릭 시 InfoWindow를 활성화하는 함수\n  const handleMarkerClick = marker => {\n    setActiveMarker(marker);\n  };\n\n  // InfoWindow 닫기\n  const handleInfoWindowClose = () => {\n    setActiveMarker(null);\n  };\n  const getPixelPositionOffset = (width, height) => ({\n    x: -(width / 2),\n    y: -(height + 20) // Adjust y position based on your need\n  });\n  return /*#__PURE__*/_jsxDEV(LoadScript, {\n    googleMapsApiKey: \"AIzaSyCoBqm6ZJlc2QRPAEZ8Op36nAklnfj5DsE\",\n    children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: containerStyle,\n      center: currentPosition,\n      zoom: 13,\n      children: [/*#__PURE__*/_jsxDEV(MarkerF, {\n        position: currentPosition,\n        title: \"\\uD604\\uC7AC \\uC704\\uCE58\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), markers.map((marker, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Marker, {\n          position: {\n            lat: marker.lat,\n            lng: marker.lng\n          },\n          icon: markerIcons[marker.type] || \"http://maps.google.com/mapfiles/ms/icons/yellow-dot.png\" // 기본 마커 색상\n          ,\n          title: marker.name,\n          onClick: () => handleMarkerClick(marker)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this)), activeMarker && /*#__PURE__*/_jsxDEV(InfoWindow, {\n        position: {\n          lat: activeMarker.lat,\n          lng: activeMarker.lng\n        },\n        onCloseClick: handleInfoWindowClose,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: activeMarker.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"\\uC8FC\\uC18C: \", activeMarker.address]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"\\uC804\\uD654\\uBC88\\uD638: \", activeMarker.phoneNumber]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"\\uC6F9\\uC0AC\\uC774\\uD2B8: \", activeMarker.website]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n_s(Map, \"X1GV4It+PRkFNIAvSLK8RD4WKJc=\");\n_c = Map;\nexport default Map;\n//   // 선택된 필터에 따라 API 호출 및 마커 설정\n//   useEffect(() => {\n//     if (selectedFilters.length === 0) {\n//       setMarkers([]); // 필터가 선택되지 않으면 마커 초기화\n//       return;\n//     }\n\n//     const fetchMarkers = async () => {\n//       const allMarkers = [];\n//       for (const filter of selectedFilters) {\n//         console.log(filter)\n//         const response = await fetch(`http://54.172.167.243:8080/searchOneCategory?address=중구&category=${filter}`);\n//         const data = await response.json();\n//         console.log(data)\n//         const newMarkers = data.map(item => ({\n//           lat: item.latitude,\n//           lng: item.longitude,\n//           name: item.name\n//         }));\n//         allMarkers.push(...newMarkers);\n//       }\n//       setMarkers(allMarkers);\n//     };\n\n//     fetchMarkers();\n//   }, [selectedFilters]);\n\n//   return (\n//     <LoadScript googleMapsApiKey=\"AIzaSyCoBqm6ZJlc2QRPAEZ8Op36nAklnfj5DsE\">\n//       <GoogleMap\n//         mapContainerStyle={containerStyle}\n//         center={currentPosition}\n//         zoom={13}\n//       >\n//         {/* 현재 위치 마커 */}\n//         <Marker position={currentPosition} title=\"현재 위치\" />\n\n//         {/* 응답 데이터 마커 */}\n//         {markers.map((marker, index) => (\n//           <Marker\n//             key={index}\n//             position={{ lat: marker.lat, lng: marker.lng }}\n//             title={marker.name}\n//           />\n//         ))}\n//       </GoogleMap>\n//     </LoadScript>\n//   );\n// };\n\n// export default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useEffect","useState","GoogleMap","LoadScript","Ad","InfoWindow","OverlayView","MarkerF","MarkerClusterer","Marker","jsxDEV","_jsxDEV","containerStyle","width","height","defaultCenter","lat","lng","markerIcons","Map","inf1","inf2","inf3","inf4","_s","currentPosition","setCurrentPosition","markers","setMarkers","activeMarker","setActiveMarker","console","log","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","error","handleMarkerClick","marker","handleInfoWindowClose","getPixelPositionOffset","x","y","googleMapsApiKey","children","mapContainerStyle","center","zoom","title","fileName","_jsxFileName","lineNumber","columnNumber","map","index","icon","type","name","onClick","onCloseClick","address","phoneNumber","website","_c","$RefreshReg$"],"sources":["/Users/p_kxn_g/Documents/GitHub/wheresMySeoul/frontend/awes/src/hotPlace/Map.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { GoogleMap, LoadScript, Ad, InfoWindow, OverlayView, MarkerF, MarkerClusterer, Marker} from '@react-google-maps/api';\nimport \"./Map.css\";\nconst containerStyle = {\n  width: '100%',\n  height: '400px'\n};\n\n// 서울의 초기 위치\nconst defaultCenter = {\n  lat: 37.5665,\n  lng: 126.9780\n};\n// 각 마커 유형에 따른 아이콘 색상 정의\nconst markerIcons = {\n  \"따릉이\": \"http://maps.google.com/mapfiles/ms/icons/green-dot.png\",\n  \"주차장\": \"http://maps.google.com/mapfiles/ms/icons/blue-dot.png\",\n  \"문화행사\": \"http://maps.google.com/mapfiles/ms/icons/red-dot.png\",\n  \"지하철\": \"http://maps.google.com/mapfiles/ms/icons/yellow-dot.png\"\n};\n\nconst Map = ({ inf1, inf2, inf3, inf4 }) => {\n  const [currentPosition, setCurrentPosition] = useState(defaultCenter);\n  const [markers, setMarkers] = useState([]);\n  const [activeMarker, setActiveMarker] = useState(null);\n  console.log(\"문화 정보:\", inf1);\n  console.log(\"주차장 정보:\", inf2);\n  console.log(\"지하철 정보:\", inf3);\n  console.log(\"자전거 정보:\", inf4);\n\n\n  useEffect(() => {\n    // 현재 위치를 설정\n    if ('geolocation' in navigator) {\n      navigator.geolocation.getCurrentPosition((position) => {\n        const { latitude, longitude } = position.coords;\n        setCurrentPosition({\n          lat: latitude,\n          lng: longitude\n        });\n        console.log(\"Current Position:\", latitude, longitude);  // 현재 위치 로그 출력\n      }, () => {\n        console.error(\"Geolocation is not supported or permission denied.\");\n      });\n    } else {\n      console.error(\"Geolocation is not supported by this browser.\");\n    }\n  }, []);\n\n  useEffect(() => {\n    // 선택된 필터에 해당하는 목업 데이터를 마커로 설정\n    // const filteredMarkers = mockData.filter(item => selectedFilters.includes(item.type));\n    // setMarkers(filteredMarkers);\n  }, []);\n\n  // 마커 클릭 시 InfoWindow를 활성화하는 함수\n  const handleMarkerClick = (marker) => {\n    setActiveMarker(marker);\n  };\n\n  // InfoWindow 닫기\n  const handleInfoWindowClose = () => {\n    setActiveMarker(null);\n  };\n\n  const getPixelPositionOffset = (width, height) => ({\n    x: -(width / 2),\n    y: -(height + 20) // Adjust y position based on your need\n  });\n\n  return (\n    <LoadScript googleMapsApiKey=\"AIzaSyCoBqm6ZJlc2QRPAEZ8Op36nAklnfj5DsE\">\n      <GoogleMap\n        mapContainerStyle={containerStyle}\n        center={currentPosition}\n        zoom={13}\n      >\n        {/* 현재 위치에 마커 표시 */}\n        <MarkerF position={currentPosition} title=\"현재 위치\" />\n    \n        {markers.map((marker, index) => (\n          <div key={index}>\n            <Marker\n              position={{ lat: marker.lat, lng: marker.lng }}\n              icon={markerIcons[marker.type] || \"http://maps.google.com/mapfiles/ms/icons/yellow-dot.png\"} // 기본 마커 색상\n              title={marker.name}\n              onClick={() => handleMarkerClick(marker)}\n            />\n          </div>\n        ))}\n        {/* 활성화된 마커에 정보창 표시 */}\n        {activeMarker && (\n          <InfoWindow\n            position={{ lat: activeMarker.lat, lng: activeMarker.lng }}\n            onCloseClick={handleInfoWindowClose}\n          >\n            <div>\n              <h4>{activeMarker.name}</h4>\n              <p>주소: {activeMarker.address}</p>\n              <p>전화번호: {activeMarker.phoneNumber}</p>\n              <p>웹사이트: {activeMarker.website}</p>\n            </div>\n          </InfoWindow>\n        )}\n      </GoogleMap>\n    </LoadScript>\n  );\n};\n\nexport default Map;\n//   // 선택된 필터에 따라 API 호출 및 마커 설정\n//   useEffect(() => {\n//     if (selectedFilters.length === 0) {\n//       setMarkers([]); // 필터가 선택되지 않으면 마커 초기화\n//       return;\n//     }\n\n//     const fetchMarkers = async () => {\n//       const allMarkers = [];\n//       for (const filter of selectedFilters) {\n//         console.log(filter)\n//         const response = await fetch(`http://54.172.167.243:8080/searchOneCategory?address=중구&category=${filter}`);\n//         const data = await response.json();\n//         console.log(data)\n//         const newMarkers = data.map(item => ({\n//           lat: item.latitude,\n//           lng: item.longitude,\n//           name: item.name\n//         }));\n//         allMarkers.push(...newMarkers);\n//       }\n//       setMarkers(allMarkers);\n//     };\n\n//     fetchMarkers();\n//   }, [selectedFilters]);\n\n//   return (\n//     <LoadScript googleMapsApiKey=\"AIzaSyCoBqm6ZJlc2QRPAEZ8Op36nAklnfj5DsE\">\n//       <GoogleMap\n//         mapContainerStyle={containerStyle}\n//         center={currentPosition}\n//         zoom={13}\n//       >\n//         {/* 현재 위치 마커 */}\n//         <Marker position={currentPosition} title=\"현재 위치\" />\n\n//         {/* 응답 데이터 마커 */}\n//         {markers.map((marker, index) => (\n//           <Marker\n//             key={index}\n//             position={{ lat: marker.lat, lng: marker.lng }}\n//             title={marker.name}\n//           />\n//         ))}\n//       </GoogleMap>\n//     </LoadScript>\n//   );\n// };\n\n// export default Map;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}