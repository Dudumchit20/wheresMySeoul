{"ast":null,"code":"var _jsxFileName = \"/Users/p_kxn_g/Documents/GitHub/wheresMySeoul/frontend/awes/src/Map.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Map = () => {\n  _s();\n  useEffect(() => {\n    // Leaflet 지도를 생성하고 설정합니다.\n    const map = L.map('map');\n\n    // OpenStreetMap 타일 레이어를 추가합니다.\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n    }).addTo(map);\n\n    // 사용자 정의 마커 아이콘 설정\n    const customIcon = L.icon({\n      iconUrl: '/png/marker_icon.png',\n      // 마커 아이콘 이미지 URL\n      iconSize: [41, 41],\n      // 마커 아이콘 크기\n      iconAnchor: [12, 41],\n      // 마커 아이콘 위치 조절\n      popupAnchor: [1, -34] // 팝업 위치 조절\n    });\n\n    // 현재 위치를 가져와서 지도에 마커로 표시합니다.\n    if (\"geolocation\" in navigator) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        var map = L.map('mapid').setView([latitude, longitude], 13); // mapid는 지도를 표시할 div의 id입니다.\n\n        // 현재 위치에 마커 추가\n        L.marker([latitude, longitude], {\n          icon: customIcon\n        }).addTo(map).bindPopup(\"현재 위치\").openPopup();\n      });\n    } else {\n      console.log(\"Geolocation is not supported by this browser.\");\n    }\n\n    // useEffect에서 반환된 함수는 컴포넌트가 언마운트될 때 정리(clean-up) 역할을 합니다.\n    // 여기서 Leaflet 지도의 인스턴스를 파기하고 이벤트 리스너를 제거합니다.\n    return () => {\n      map.remove();\n    };\n  }, []); // 두 번째 매개변수로 빈 배열을 전달하여 컴포넌트가 처음으로 렌더링될 때만 실행되도록 합니다.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"map\",\n    style: {\n      flex: 1\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(Map, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useEffect","L","jsxDEV","_jsxDEV","Map","_s","map","tileLayer","attribution","addTo","customIcon","icon","iconUrl","iconSize","iconAnchor","popupAnchor","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","setView","marker","bindPopup","openPopup","console","log","remove","id","style","flex","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/p_kxn_g/Documents/GitHub/wheresMySeoul/frontend/awes/src/Map.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\n\nconst Map = () => {\n  useEffect(() => {\n    // Leaflet 지도를 생성하고 설정합니다.\n    const map = L.map('map');\n\n    // OpenStreetMap 타일 레이어를 추가합니다.\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n    }).addTo(map);\n\n    // 사용자 정의 마커 아이콘 설정\n    const customIcon = L.icon({\n      iconUrl: '/png/marker_icon.png', // 마커 아이콘 이미지 URL\n      iconSize: [41, 41], // 마커 아이콘 크기\n      iconAnchor: [12, 41], // 마커 아이콘 위치 조절\n      popupAnchor: [1, -34] // 팝업 위치 조절\n    });\n\n    // 현재 위치를 가져와서 지도에 마커로 표시합니다.\n    if (\"geolocation\" in navigator) {\n      navigator.geolocation.getCurrentPosition((position) => {\n        const { latitude, longitude } = position.coords;\n        \n        var map = L.map('mapid').setView([latitude, longitude], 13); // mapid는 지도를 표시할 div의 id입니다.\n\n\n        // 현재 위치에 마커 추가\n        L.marker([latitude, longitude], { icon: customIcon }).addTo(map)\n          .bindPopup(\"현재 위치\")\n          .openPopup();\n      });\n    } else {\n      console.log(\"Geolocation is not supported by this browser.\");\n    }\n\n    // useEffect에서 반환된 함수는 컴포넌트가 언마운트될 때 정리(clean-up) 역할을 합니다.\n    // 여기서 Leaflet 지도의 인스턴스를 파기하고 이벤트 리스너를 제거합니다.\n    return () => {\n      map.remove();\n    };\n  }, []); // 두 번째 매개변수로 빈 배열을 전달하여 컴포넌트가 처음으로 렌더링될 때만 실행되도록 합니다.\n\n  return (\n    <div id=\"map\" style={{ flex:1 }}></div>\n  );\n};\n\nexport default Map;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAO,0BAA0B;AACjC,OAAOC,CAAC,MAAM,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExB,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChBL,SAAS,CAAC,MAAM;IACd;IACA,MAAMM,GAAG,GAAGL,CAAC,CAACK,GAAG,CAAC,KAAK,CAAC;;IAExB;IACAL,CAAC,CAACM,SAAS,CAAC,oDAAoD,EAAE;MAChEC,WAAW,EAAE;IACf,CAAC,CAAC,CAACC,KAAK,CAACH,GAAG,CAAC;;IAEb;IACA,MAAMI,UAAU,GAAGT,CAAC,CAACU,IAAI,CAAC;MACxBC,OAAO,EAAE,sBAAsB;MAAE;MACjCC,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;MAAE;MACpBC,UAAU,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;MAAE;MACtBC,WAAW,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACxB,CAAC,CAAC;;IAEF;IACA,IAAI,aAAa,IAAIC,SAAS,EAAE;MAC9BA,SAAS,CAACC,WAAW,CAACC,kBAAkB,CAAEC,QAAQ,IAAK;QACrD,MAAM;UAAEC,QAAQ;UAAEC;QAAU,CAAC,GAAGF,QAAQ,CAACG,MAAM;QAE/C,IAAIhB,GAAG,GAAGL,CAAC,CAACK,GAAG,CAAC,OAAO,CAAC,CAACiB,OAAO,CAAC,CAACH,QAAQ,EAAEC,SAAS,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;QAG7D;QACApB,CAAC,CAACuB,MAAM,CAAC,CAACJ,QAAQ,EAAEC,SAAS,CAAC,EAAE;UAAEV,IAAI,EAAED;QAAW,CAAC,CAAC,CAACD,KAAK,CAACH,GAAG,CAAC,CAC7DmB,SAAS,CAAC,OAAO,CAAC,CAClBC,SAAS,CAAC,CAAC;MAChB,CAAC,CAAC;IACJ,CAAC,MAAM;MACLC,OAAO,CAACC,GAAG,CAAC,+CAA+C,CAAC;IAC9D;;IAEA;IACA;IACA,OAAO,MAAM;MACXtB,GAAG,CAACuB,MAAM,CAAC,CAAC;IACd,CAAC;EACH,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACE1B,OAAA;IAAK2B,EAAE,EAAC,KAAK;IAACC,KAAK,EAAE;MAAEC,IAAI,EAAC;IAAE;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;AAE3C,CAAC;AAAC/B,EAAA,CA7CID,GAAG;AAAAiC,EAAA,GAAHjC,GAAG;AA+CT,eAAeA,GAAG;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}