{"ast":null,"code":"var _jsxFileName = \"/Users/p_kxn_g/Documents/GitHub/wheresMySeoul/frontend/awes/src/hotPlace/Map.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { GoogleMap, LoadScript, Ad, InfoWindow, OverlayView, MarkerF, MarkerClusterer, Marker } from '@react-google-maps/api';\nimport \"./Map.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  width: '100%',\n  height: '400px'\n};\n\n// 서울의 초기 위치\nconst defaultCenter = {\n  lat: 37.5665,\n  lng: 126.9780\n};\n// 각 마커 유형에 따른 아이콘 색상 정의\nconst markerIcons = {\n  \"따릉이\": \"http://maps.google.com/mapfiles/ms/icons/green-dot.png\",\n  \"주차장\": \"http://maps.google.com/mapfiles/ms/icons/blue-dot.png\",\n  \"문화행사\": \"http://maps.google.com/mapfiles/ms/icons/red-dot.png\",\n  \"지하철\": \"http://maps.google.com/mapfiles/ms/icons/yellow-dot.png\"\n};\nconst Map = ({\n  inf1,\n  inf2,\n  inf3,\n  inf4\n}) => {\n  _s();\n  const [currentPosition, setCurrentPosition] = useState(defaultCenter);\n  const [activeMarker, setActiveMarker] = useState(null);\n\n  // 현재 위치 설정\n  useEffect(() => {\n    if ('geolocation' in navigator) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        setCurrentPosition({\n          lat: latitude,\n          lng: longitude\n        });\n      }, () => {\n        console.error(\"Geolocation is not supported or permission denied.\");\n      });\n    } else {\n      console.error(\"Geolocation is not supported by this browser.\");\n    }\n  }, []);\n\n  // 각 정보에 대한 마커 설정\n  const markers = useMemo(() => {\n    const allMarkers = [];\n    // inf1 정보에 대한 마커 추가\n    inf1.forEach(item => {\n      allMarkers.push({\n        lat: item.latitude,\n        lng: item.longitude,\n        name: item.name,\n        type: \"문화행사\" // 예시로 \"문화행사\" 타입으로 설정\n      });\n    });\n    // inf2 정보에 대한 마커 추가\n    inf2.forEach(item => {\n      allMarkers.push({\n        lat: item.latitude,\n        lng: item.longitude,\n        name: item.name,\n        type: \"주차장\" // 예시로 \"주차장\" 타입으로 설정\n      });\n    });\n    // inf3 정보에 대한 마커 추가\n    inf3.forEach(item => {\n      allMarkers.push({\n        lat: item.latitude,\n        lng: item.longitude,\n        name: item.name,\n        type: \"지하철\" // 예시로 \"지하철\" 타입으로 설정\n      });\n    });\n    // inf4 정보에 대한 마커 추가\n    inf4.forEach(item => {\n      allMarkers.push({\n        lat: item.latitude,\n        lng: item.longitude,\n        name: item.name,\n        type: \"따릉이\" // 예시로 \"따릉이\" 타입으로 설정\n      });\n    });\n    return allMarkers;\n  }, [inf1, inf2, inf3, inf4]);\n\n  // 마커 클릭 시 InfoWindow를 활성화하는 함수\n  const handleMarkerClick = marker => {\n    setActiveMarker(marker);\n  };\n\n  // InfoWindow 닫기\n  const handleInfoWindowClose = () => {\n    setActiveMarker(null);\n  };\n  return /*#__PURE__*/_jsxDEV(LoadScript, {\n    googleMapsApiKey: \"YOUR_API_KEY\",\n    children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: containerStyle,\n      center: currentPosition,\n      zoom: 13,\n      children: [/*#__PURE__*/_jsxDEV(MarkerF, {\n        position: currentPosition,\n        title: \"\\uD604\\uC7AC \\uC704\\uCE58\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), markers.map((marker, index) => /*#__PURE__*/_jsxDEV(Marker, {\n        position: {\n          lat: marker.lat,\n          lng: marker.lng\n        },\n        icon: markerIcons[marker.type] || \"http://maps.google.com/mapfiles/ms/icons/yellow-dot.png\" // 각 마커 유형에 따른 아이콘 색상 설정\n        ,\n        title: marker.name,\n        onClick: () => handleMarkerClick(marker)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this)), activeMarker && /*#__PURE__*/_jsxDEV(InfoWindow, {\n        position: {\n          lat: activeMarker.lat,\n          lng: activeMarker.lng\n        },\n        onCloseClick: handleInfoWindowClose,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: activeMarker.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n_s(Map, \"dgUpOFv+KUsUzudbgpWzJ/N3fTc=\");\n_c = Map;\nexport default Map;\n//   // 선택된 필터에 따라 API 호출 및 마커 설정\n//   useEffect(() => {\n//     if (selectedFilters.length === 0) {\n//       setMarkers([]); // 필터가 선택되지 않으면 마커 초기화\n//       return;\n//     }\n\n//     const fetchMarkers = async () => {\n//       const allMarkers = [];\n//       for (const filter of selectedFilters) {\n//         console.log(filter)\n//         const response = await fetch(`http://54.172.167.243:8080/searchOneCategory?address=중구&category=${filter}`);\n//         const data = await response.json();\n//         console.log(data)\n//         const newMarkers = data.map(item => ({\n//           lat: item.latitude,\n//           lng: item.longitude,\n//           name: item.name\n//         }));\n//         allMarkers.push(...newMarkers);\n//       }\n//       setMarkers(allMarkers);\n//     };\n\n//     fetchMarkers();\n//   }, [selectedFilters]);\n\n//   return (\n//     <LoadScript googleMapsApiKey=\"AIzaSyCoBqm6ZJlc2QRPAEZ8Op36nAklnfj5DsE\">\n//       <GoogleMap\n//         mapContainerStyle={containerStyle}\n//         center={currentPosition}\n//         zoom={13}\n//       >\n//         {/* 현재 위치 마커 */}\n//         <Marker position={currentPosition} title=\"현재 위치\" />\n\n//         {/* 응답 데이터 마커 */}\n//         {markers.map((marker, index) => (\n//           <Marker\n//             key={index}\n//             position={{ lat: marker.lat, lng: marker.lng }}\n//             title={marker.name}\n//           />\n//         ))}\n//       </GoogleMap>\n//     </LoadScript>\n//   );\n// };\n\n// export default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useEffect","useState","GoogleMap","LoadScript","Ad","InfoWindow","OverlayView","MarkerF","MarkerClusterer","Marker","jsxDEV","_jsxDEV","containerStyle","width","height","defaultCenter","lat","lng","markerIcons","Map","inf1","inf2","inf3","inf4","_s","currentPosition","setCurrentPosition","activeMarker","setActiveMarker","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","console","error","markers","useMemo","allMarkers","forEach","item","push","name","type","handleMarkerClick","marker","handleInfoWindowClose","googleMapsApiKey","children","mapContainerStyle","center","zoom","title","fileName","_jsxFileName","lineNumber","columnNumber","map","index","icon","onClick","onCloseClick","_c","$RefreshReg$"],"sources":["/Users/p_kxn_g/Documents/GitHub/wheresMySeoul/frontend/awes/src/hotPlace/Map.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { GoogleMap, LoadScript, Ad, InfoWindow, OverlayView, MarkerF, MarkerClusterer, Marker} from '@react-google-maps/api';\nimport \"./Map.css\";\nconst containerStyle = {\n  width: '100%',\n  height: '400px'\n};\n\n// 서울의 초기 위치\nconst defaultCenter = {\n  lat: 37.5665,\n  lng: 126.9780\n};\n// 각 마커 유형에 따른 아이콘 색상 정의\nconst markerIcons = {\n  \"따릉이\": \"http://maps.google.com/mapfiles/ms/icons/green-dot.png\",\n  \"주차장\": \"http://maps.google.com/mapfiles/ms/icons/blue-dot.png\",\n  \"문화행사\": \"http://maps.google.com/mapfiles/ms/icons/red-dot.png\",\n  \"지하철\": \"http://maps.google.com/mapfiles/ms/icons/yellow-dot.png\"\n};\n\nconst Map = ({ inf1, inf2, inf3, inf4 }) => {\n  const [currentPosition, setCurrentPosition] = useState(defaultCenter);\n  const [activeMarker, setActiveMarker] = useState(null);\n\n  // 현재 위치 설정\n  useEffect(() => {\n    if ('geolocation' in navigator) {\n      navigator.geolocation.getCurrentPosition((position) => {\n        const { latitude, longitude } = position.coords;\n        setCurrentPosition({ lat: latitude, lng: longitude });\n      }, () => {\n        console.error(\"Geolocation is not supported or permission denied.\");\n      });\n    } else {\n      console.error(\"Geolocation is not supported by this browser.\");\n    }\n  }, []);\n\n  // 각 정보에 대한 마커 설정\n  const markers = useMemo(() => {\n    const allMarkers = [];\n    // inf1 정보에 대한 마커 추가\n    inf1.forEach((item) => {\n      allMarkers.push({\n        lat: item.latitude,\n        lng: item.longitude,\n        name: item.name,\n        type: \"문화행사\" // 예시로 \"문화행사\" 타입으로 설정\n      });\n    });\n    // inf2 정보에 대한 마커 추가\n    inf2.forEach((item) => {\n      allMarkers.push({\n        lat: item.latitude,\n        lng: item.longitude,\n        name: item.name,\n        type: \"주차장\" // 예시로 \"주차장\" 타입으로 설정\n      });\n    });\n    // inf3 정보에 대한 마커 추가\n    inf3.forEach((item) => {\n      allMarkers.push({\n        lat: item.latitude,\n        lng: item.longitude,\n        name: item.name,\n        type: \"지하철\" // 예시로 \"지하철\" 타입으로 설정\n      });\n    });\n    // inf4 정보에 대한 마커 추가\n    inf4.forEach((item) => {\n      allMarkers.push({\n        lat: item.latitude,\n        lng: item.longitude,\n        name: item.name,\n        type: \"따릉이\" // 예시로 \"따릉이\" 타입으로 설정\n      });\n    });\n    return allMarkers;\n  }, [inf1, inf2, inf3, inf4]);\n\n  // 마커 클릭 시 InfoWindow를 활성화하는 함수\n  const handleMarkerClick = (marker) => {\n    setActiveMarker(marker);\n  };\n\n  // InfoWindow 닫기\n  const handleInfoWindowClose = () => {\n    setActiveMarker(null);\n  };\n\n  return (\n    <LoadScript googleMapsApiKey=\"YOUR_API_KEY\">\n      <GoogleMap\n        mapContainerStyle={containerStyle}\n        center={currentPosition}\n        zoom={13}\n      >\n        {/* 현재 위치 마커 */}\n        <MarkerF position={currentPosition} title=\"현재 위치\" />\n    \n        {/* 각 정보에 대한 마커 표시 */}\n        {markers.map((marker, index) => (\n          <Marker\n            key={index}\n            position={{ lat: marker.lat, lng: marker.lng }}\n            icon={markerIcons[marker.type] || \"http://maps.google.com/mapfiles/ms/icons/yellow-dot.png\"} // 각 마커 유형에 따른 아이콘 색상 설정\n            title={marker.name}\n            onClick={() => handleMarkerClick(marker)}\n          />\n        ))}\n        \n        {/* 활성화된 마커에 정보창 표시 */}\n        {activeMarker && (\n          <InfoWindow\n            position={{ lat: activeMarker.lat, lng: activeMarker.lng }}\n            onCloseClick={handleInfoWindowClose}\n          >\n            <div>\n              <h4>{activeMarker.name}</h4>\n              {/* 여기에 마커에 대한 추가 정보 표시 가능 */}\n            </div>\n          </InfoWindow>\n        )}\n      </GoogleMap>\n    </LoadScript>\n  );\n};\n\nexport default Map;\n//   // 선택된 필터에 따라 API 호출 및 마커 설정\n//   useEffect(() => {\n//     if (selectedFilters.length === 0) {\n//       setMarkers([]); // 필터가 선택되지 않으면 마커 초기화\n//       return;\n//     }\n\n//     const fetchMarkers = async () => {\n//       const allMarkers = [];\n//       for (const filter of selectedFilters) {\n//         console.log(filter)\n//         const response = await fetch(`http://54.172.167.243:8080/searchOneCategory?address=중구&category=${filter}`);\n//         const data = await response.json();\n//         console.log(data)\n//         const newMarkers = data.map(item => ({\n//           lat: item.latitude,\n//           lng: item.longitude,\n//           name: item.name\n//         }));\n//         allMarkers.push(...newMarkers);\n//       }\n//       setMarkers(allMarkers);\n//     };\n\n//     fetchMarkers();\n//   }, [selectedFilters]);\n\n//   return (\n//     <LoadScript googleMapsApiKey=\"AIzaSyCoBqm6ZJlc2QRPAEZ8Op36nAklnfj5DsE\">\n//       <GoogleMap\n//         mapContainerStyle={containerStyle}\n//         center={currentPosition}\n//         zoom={13}\n//       >\n//         {/* 현재 위치 마커 */}\n//         <Marker position={currentPosition} title=\"현재 위치\" />\n\n//         {/* 응답 데이터 마커 */}\n//         {markers.map((marker, index) => (\n//           <Marker\n//             key={index}\n//             position={{ lat: marker.lat, lng: marker.lng }}\n//             title={marker.name}\n//           />\n//         ))}\n//       </GoogleMap>\n//     </LoadScript>\n//   );\n// };\n\n// export default Map;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}