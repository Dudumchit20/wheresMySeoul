{"ast":null,"code":"var _jsxFileName = \"/Users/p_kxn_g/Documents/GitHub/wheresMySeoul/frontend/awes/src/search/Map.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { GoogleMap, InfoWindow, MarkerF, Marker } from '@react-google-maps/api';\nimport \"./Map.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  width: '100%',\n  height: '100%'\n};\n\n// 서울의 초기 위치\nconst defaultCenter = {\n  lat: 37.5665,\n  lng: 126.9780\n};\n\n// 각 마커 유형에 따른 아이콘 색상 정의\nconst markerIcons = {\n  \"자연\": \"http://maps.google.com/mapfiles/ms/icons/green-dot.png\",\n  \"쇼핑\": \"http://maps.google.com/mapfiles/ms/icons/blue-dot.png\",\n  \"명소\": \"http://maps.google.com/mapfiles/ms/icons/pink-dot.png\",\n  \"음식\": \"http://maps.google.com/mapfiles/ms/icons/orange-dot.png\",\n  \"관광거리\": \"http://maps.google.com/mapfiles/ms/icons/purple-dot.png\",\n  \"외국인\": \"http://maps.google.com/mapfiles/ms/icons/red-dot.png\",\n  \"문화\": \"http://maps.google.com/mapfiles/ms/icons/yellow-dot.png\"\n};\nconst Map = ({\n  selectedFilters\n}) => {\n  _s();\n  const [currentPosition, setCurrentPosition] = useState(defaultCenter);\n  const [allMarkers, setAllMarkers] = useState({}); // API에서 불러온 모든 마커 데이터 저장\n  const [filteredMarkers, setFilteredMarkers] = useState([]); // 필터링된 마커 데이터를 저장\n  const [activeMarker, setActiveMarker] = useState(null);\n\n  // 현재 위치를 설정하는 useEffect\n  useEffect(() => {\n    if ('geolocation' in navigator) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        setCurrentPosition({\n          lat: latitude,\n          lng: longitude\n        });\n        console.log(\"Current Position:\", latitude, longitude); // 현재 위치 로그 출력\n      }, () => {\n        console.error(\"Geolocation is not supported or permission denied.\");\n      });\n    } else {\n      console.error(\"Geolocation is not supported by this browser.\");\n    }\n  }, []);\n\n  // 각 카테고리별로 데이터를 불러오는 함수\n  const fetchData = async category => {\n    try {\n      const response = await fetch(`http://3.39.223.21:8080/searchOneCategory?address=중구&category=${category}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      return {\n        [category]: data\n      };\n    } catch (error) {\n      console.error(`Failed to fetch data for category ${category}:`, error);\n      return {\n        [category]: []\n      }; // 에러가 발생했을 경우 빈 배열 반환\n    }\n  };\n\n  // 처음 마운트될 때 모든 카테고리에 대한 데이터를 불러옴\n  useEffect(() => {\n    console.log(\"log------------------\");\n    const fetchAllData = async () => {\n      const filtersNames = ['관광거리', '명소', '문화', '쇼핑', '자연', '음식', '외국인'];\n      const promises = filtersNames.map(category => fetchData(category)); // 모든 카테고리에 대해 fetchData 호출\n      const results = await Promise.all(promises); // 모든 프로미스가 완료될 때까지 기다림\n      const allData = results.reduce((acc, curr) => ({\n        ...acc,\n        ...curr\n      }), {}); // 결과를 딕셔너리로 합침\n      console.log(\"All fetched data:\", allData); // 모든 데이터를 로그로 출력\n      setAllMarkers(allData); // allMarkers 상태를 업데이트\n    };\n    fetchAllData();\n  }, []);\n\n  // selectedFilters가 변경될 때마다 필터링 수행\n  useEffect(() => {\n    const filteredData = Object.keys(allMarkers).filter(key => selectedFilters.includes(key)) // 선택된 필터에 해당하는 키만 필터링\n    .flatMap(key => allMarkers[key]); // 해당 키의 데이터를 합침\n    setFilteredMarkers(filteredData);\n    console.log(filteredMarkers);\n  }, [selectedFilters, allMarkers]);\n\n  // 마커 클릭 시 InfoWindow를 활성화하는 함수\n  const handleMarkerClick = marker => {\n    setActiveMarker(marker);\n  };\n\n  // InfoWindow 닫기\n  const handleInfoWindowClose = () => {\n    setActiveMarker(null);\n  };\n  const getPixelPositionOffset = (width, height) => ({\n    x: -(width / 2),\n    y: -(height + 20) // Adjust y position based on your need\n  });\n  return /*#__PURE__*/_jsxDEV(GoogleMap, {\n    mapContainerStyle: containerStyle,\n    center: currentPosition,\n    zoom: 13,\n    children: [/*#__PURE__*/_jsxDEV(MarkerF, {\n      position: currentPosition,\n      title: \"\\uD604\\uC7AC \\uC704\\uCE58\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), filteredMarkers.map((marker, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Marker, {\n        position: {\n          lat: marker.lat,\n          lng: marker.lng\n        },\n        icon: markerIcons[marker.type] || \"http://maps.google.com/mapfiles/ms/icons/yellow-dot.png\" // 기본 마커 색상\n        ,\n        title: marker.name,\n        onClick: () => handleMarkerClick(marker)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }, this)), activeMarker && /*#__PURE__*/_jsxDEV(InfoWindow, {\n      position: {\n        lat: activeMarker.lat,\n        lng: activeMarker.lng\n      },\n      onCloseClick: handleInfoWindowClose,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: activeMarker.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\uC8FC\\uC18C: \", activeMarker.address]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\uC804\\uD654\\uBC88\\uD638: \", activeMarker.phoneNumber]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\uC6F9\\uC0AC\\uC774\\uD2B8: \", activeMarker.website]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n};\n_s(Map, \"TC+LCYJxvyA1/CagoRbj8sFi4Dk=\");\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useEffect","useState","GoogleMap","InfoWindow","MarkerF","Marker","jsxDEV","_jsxDEV","containerStyle","width","height","defaultCenter","lat","lng","markerIcons","Map","selectedFilters","_s","currentPosition","setCurrentPosition","allMarkers","setAllMarkers","filteredMarkers","setFilteredMarkers","activeMarker","setActiveMarker","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","console","log","error","fetchData","category","response","fetch","ok","Error","status","data","json","fetchAllData","filtersNames","promises","map","results","Promise","all","allData","reduce","acc","curr","filteredData","Object","keys","filter","key","includes","flatMap","handleMarkerClick","marker","handleInfoWindowClose","getPixelPositionOffset","x","y","mapContainerStyle","center","zoom","children","title","fileName","_jsxFileName","lineNumber","columnNumber","index","icon","type","name","onClick","onCloseClick","address","phoneNumber","website","_c","$RefreshReg$"],"sources":["/Users/p_kxn_g/Documents/GitHub/wheresMySeoul/frontend/awes/src/search/Map.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { GoogleMap, InfoWindow, MarkerF, Marker } from '@react-google-maps/api';\nimport \"./Map.css\";\n\nconst containerStyle = {\n  width: '100%',\n  height: '100%'\n};\n\n// 서울의 초기 위치\nconst defaultCenter = {\n  lat: 37.5665,\n  lng: 126.9780\n};\n\n// 각 마커 유형에 따른 아이콘 색상 정의\nconst markerIcons = {\n  \"자연\": \"http://maps.google.com/mapfiles/ms/icons/green-dot.png\",\n  \"쇼핑\": \"http://maps.google.com/mapfiles/ms/icons/blue-dot.png\",\n  \"명소\": \"http://maps.google.com/mapfiles/ms/icons/pink-dot.png\",\n  \"음식\": \"http://maps.google.com/mapfiles/ms/icons/orange-dot.png\",\n  \"관광거리\": \"http://maps.google.com/mapfiles/ms/icons/purple-dot.png\",\n  \"외국인\": \"http://maps.google.com/mapfiles/ms/icons/red-dot.png\",\n  \"문화\": \"http://maps.google.com/mapfiles/ms/icons/yellow-dot.png\"\n};\n\nconst Map = ({ selectedFilters }) => {\n  const [currentPosition, setCurrentPosition] = useState(defaultCenter);\n  const [allMarkers, setAllMarkers] = useState({}); // API에서 불러온 모든 마커 데이터 저장\n  const [filteredMarkers, setFilteredMarkers] = useState([]); // 필터링된 마커 데이터를 저장\n  const [activeMarker, setActiveMarker] = useState(null);\n\n  // 현재 위치를 설정하는 useEffect\n  useEffect(() => {\n    if ('geolocation' in navigator) {\n      navigator.geolocation.getCurrentPosition((position) => {\n        const { latitude, longitude } = position.coords;\n        setCurrentPosition({\n          lat: latitude,\n          lng: longitude\n        });\n        console.log(\"Current Position:\", latitude, longitude); // 현재 위치 로그 출력\n      }, () => {\n        console.error(\"Geolocation is not supported or permission denied.\");\n      });\n    } else {\n      console.error(\"Geolocation is not supported by this browser.\");\n    }\n  }, []);\n\n  // 각 카테고리별로 데이터를 불러오는 함수\n  const fetchData = async (category) => {\n    try {\n      const response = await fetch(`http://3.39.223.21:8080/searchOneCategory?address=중구&category=${category}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      return { [category]: data };\n    } catch (error) {\n      console.error(`Failed to fetch data for category ${category}:`, error);\n      return { [category]: [] }; // 에러가 발생했을 경우 빈 배열 반환\n    }\n  };\n\n  // 처음 마운트될 때 모든 카테고리에 대한 데이터를 불러옴\n  useEffect(() => {\n    console.log(\"log------------------\")\n    const fetchAllData = async () => {\n      const filtersNames = ['관광거리', '명소', '문화', '쇼핑', '자연', '음식', '외국인'];\n      const promises = filtersNames.map(category => fetchData(category)); // 모든 카테고리에 대해 fetchData 호출\n      const results = await Promise.all(promises); // 모든 프로미스가 완료될 때까지 기다림\n      const allData = results.reduce((acc, curr) => ({ ...acc, ...curr }), {}); // 결과를 딕셔너리로 합침\n      console.log(\"All fetched data:\", allData); // 모든 데이터를 로그로 출력\n      setAllMarkers(allData); // allMarkers 상태를 업데이트\n    };\n    \n\n    fetchAllData();\n  }, []);\n\n  // selectedFilters가 변경될 때마다 필터링 수행\n  useEffect(() => {\n    const filteredData = Object.keys(allMarkers)\n      .filter(key => selectedFilters.includes(key)) // 선택된 필터에 해당하는 키만 필터링\n      .flatMap(key => allMarkers[key]); // 해당 키의 데이터를 합침\n    setFilteredMarkers(filteredData);\n    console.log(filteredMarkers)\n  }, [selectedFilters, allMarkers]);\n\n  // 마커 클릭 시 InfoWindow를 활성화하는 함수\n  const handleMarkerClick = (marker) => {\n    setActiveMarker(marker);\n  };\n\n  // InfoWindow 닫기\n  const handleInfoWindowClose = () => {\n    setActiveMarker(null);\n  };\n\n  const getPixelPositionOffset = (width, height) => ({\n    x: -(width / 2),\n    y: -(height + 20) // Adjust y position based on your need\n  });\n\n  return (\n    <GoogleMap\n      mapContainerStyle={containerStyle}\n      center={currentPosition}\n      zoom={13}\n    >\n      {/* 현재 위치에 마커 표시 */}\n      <MarkerF position={currentPosition} title=\"현재 위치\" />\n\n      {filteredMarkers.map((marker, index) => (\n        <div key={index}>\n          <Marker\n            position={{ lat: marker.lat, lng: marker.lng }}\n            icon={markerIcons[marker.type] || \"http://maps.google.com/mapfiles/ms/icons/yellow-dot.png\"} // 기본 마커 색상\n            title={marker.name}\n            onClick={() => handleMarkerClick(marker)}\n          />\n        </div>\n      ))}\n      {/* 활성화된 마커에 정보창 표시 */}\n      {activeMarker && (\n        <InfoWindow\n          position={{ lat: activeMarker.lat, lng: activeMarker.lng }}\n          onCloseClick={handleInfoWindowClose}\n        >\n          <div>\n            <h4>{activeMarker.name}</h4>\n            <p>주소: {activeMarker.address}</p>\n            <p>전화번호: {activeMarker.phoneNumber}</p>\n            <p>웹사이트: {activeMarker.website}</p>\n          </div>\n        </InfoWindow>\n      )}\n    </GoogleMap>\n  );\n};\n\nexport default Map;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}