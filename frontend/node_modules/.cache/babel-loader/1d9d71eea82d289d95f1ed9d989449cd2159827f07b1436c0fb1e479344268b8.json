{"ast":null,"code":"var _jsxFileName = \"/Users/p_kxn_g/Documents/GitHub/wheresMySeoul/frontend/awes/src/language/LanguageContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LanguageContext = /*#__PURE__*/createContext();\nexport const useLanguage = () => {\n  _s();\n  return useContext(LanguageContext);\n};\n_s(useLanguage, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const LanguageProvider = ({\n  children\n}) => {\n  _s2();\n  const [language, setLanguage] = useState('ko'); // 기본 언어 설정\n  const [text, setText] = useState({\n    welcome: \"환영합니다\" // 예시로 '환영합니다' 텍스트 사용\n  });\n  const translateText = async (textToTranslate, targetLang) => {\n    const apiKey = 'YOUR_API_KEY_HERE'; // API 키를 여기에 넣으세요\n    const url = `https://translation.googleapis.com/language/translate/v2?key=${apiKey}`;\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          q: textToTranslate,\n          target: targetLang\n        })\n      });\n      const data = await response.json();\n      return data.data.translations[0].translatedText;\n    } catch (error) {\n      console.error('Error translating text:', error);\n      return textToTranslate; // 에러 시 원본 텍스트 반환\n    }\n  };\n  useEffect(() => {\n    // 언어가 변경될 때마다 '환영합니다'를 해당 언어로 번역\n    translateText('환영합니다', language).then(translated => {\n      setText({\n        welcome: translated\n      });\n    });\n  }, [language]);\n  const toggleLanguage = lang => {\n    setLanguage(lang); // 언어 상태 변경\n  };\n  return /*#__PURE__*/_jsxDEV(LanguageContext.Provider, {\n    value: {\n      language,\n      text,\n      toggleLanguage\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s2(LanguageProvider, \"bGhIV3JoTWwtZmWewefl4Gh4sos=\");\n_c = LanguageProvider;\nvar _c;\n$RefreshReg$(_c, \"LanguageProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","LanguageContext","useLanguage","_s","LanguageProvider","children","_s2","language","setLanguage","text","setText","welcome","translateText","textToTranslate","targetLang","apiKey","url","response","fetch","method","headers","body","JSON","stringify","q","target","data","json","translations","translatedText","error","console","then","translated","toggleLanguage","lang","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/p_kxn_g/Documents/GitHub/wheresMySeoul/frontend/awes/src/language/LanguageContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst LanguageContext = createContext();\n\nexport const useLanguage = () => useContext(LanguageContext);\n\nexport const LanguageProvider = ({ children }) => {\n  const [language, setLanguage] = useState('ko'); // 기본 언어 설정\n  const [text, setText] = useState({\n    welcome: \"환영합니다\",  // 예시로 '환영합니다' 텍스트 사용\n  });\n\n  const translateText = async (textToTranslate, targetLang) => {\n    const apiKey = 'YOUR_API_KEY_HERE';  // API 키를 여기에 넣으세요\n    const url = `https://translation.googleapis.com/language/translate/v2?key=${apiKey}`;\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          q: textToTranslate,\n          target: targetLang\n        })\n      });\n      const data = await response.json();\n      return data.data.translations[0].translatedText;\n    } catch (error) {\n      console.error('Error translating text:', error);\n      return textToTranslate; // 에러 시 원본 텍스트 반환\n    }\n  };\n\n  useEffect(() => {\n    // 언어가 변경될 때마다 '환영합니다'를 해당 언어로 번역\n    translateText('환영합니다', language).then(translated => {\n      setText({ welcome: translated });\n    });\n  }, [language]);\n\n  const toggleLanguage = (lang) => {\n    setLanguage(lang);  // 언어 상태 변경\n  };\n\n  return (\n    <LanguageContext.Provider value={{ language, text, toggleLanguage }}>\n      {children}\n    </LanguageContext.Provider>\n  );\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,eAAe,gBAAGN,aAAa,CAAC,CAAC;AAEvC,OAAO,MAAMO,WAAW,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMP,UAAU,CAACK,eAAe,CAAC;AAAA;AAACE,EAAA,CAAhDD,WAAW;AAExB,OAAO,MAAME,gBAAgB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAChD,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAChD,MAAM,CAACY,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC;IAC/Bc,OAAO,EAAE,OAAO,CAAG;EACrB,CAAC,CAAC;EAEF,MAAMC,aAAa,GAAG,MAAAA,CAAOC,eAAe,EAAEC,UAAU,KAAK;IAC3D,MAAMC,MAAM,GAAG,mBAAmB,CAAC,CAAE;IACrC,MAAMC,GAAG,GAAI,gEAA+DD,MAAO,EAAC;IACpF,IAAI;MACF,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,EAAE;QAChCG,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBC,CAAC,EAAEX,eAAe;UAClBY,MAAM,EAAEX;QACV,CAAC;MACH,CAAC,CAAC;MACF,MAAMY,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;MAClC,OAAOD,IAAI,CAACA,IAAI,CAACE,YAAY,CAAC,CAAC,CAAC,CAACC,cAAc;IACjD,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,OAAOjB,eAAe,CAAC,CAAC;IAC1B;EACF,CAAC;EAEDf,SAAS,CAAC,MAAM;IACd;IACAc,aAAa,CAAC,OAAO,EAAEL,QAAQ,CAAC,CAACyB,IAAI,CAACC,UAAU,IAAI;MAClDvB,OAAO,CAAC;QAAEC,OAAO,EAAEsB;MAAW,CAAC,CAAC;IAClC,CAAC,CAAC;EACJ,CAAC,EAAE,CAAC1B,QAAQ,CAAC,CAAC;EAEd,MAAM2B,cAAc,GAAIC,IAAI,IAAK;IAC/B3B,WAAW,CAAC2B,IAAI,CAAC,CAAC,CAAE;EACtB,CAAC;EAED,oBACEnC,OAAA,CAACC,eAAe,CAACmC,QAAQ;IAACC,KAAK,EAAE;MAAE9B,QAAQ;MAAEE,IAAI;MAAEyB;IAAe,CAAE;IAAA7B,QAAA,EACjEA;EAAQ;IAAAiC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACe,CAAC;AAE/B,CAAC;AAACnC,GAAA,CA5CWF,gBAAgB;AAAAsC,EAAA,GAAhBtC,gBAAgB;AAAA,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}