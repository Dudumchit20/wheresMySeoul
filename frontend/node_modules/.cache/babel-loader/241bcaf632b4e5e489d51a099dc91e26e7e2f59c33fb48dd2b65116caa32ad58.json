{"ast":null,"code":"var _jsxFileName = \"/Users/p_kxn_g/Documents/GitHub/wheresMySeoul/frontend/awes/src/hotPlace/HotPlace.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './HotPlace.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SEOUL_OPEN_DATA_AUTH_KEY_ = \"515653596b79756a38384a77506645\"; // 서울 열린 데이터\n\n// 1부터 115까지 \"POI001\", \"POI002\", ..., \"POI115\" 형식의 리스트 생성\nconst AREA_CODES = Array.from({\n  length: 115\n}, (_, index) => {\n  const number = (index + 1).toString().padStart(3, '0'); // 3자리 숫자로 포맷\n  return `POI${number}`;\n});\nfunction HotPlaces() {\n  _s();\n  const [hotPlaces, setHotPlaces] = useState([]);\n  const [selectedPlace, setSelectedPlace] = useState(null);\n  const fetchHotPlaces = async () => {\n    // 결과를 저장할 배열을 초기화합니다.\n    const results = [];\n\n    // 각 장소에 대한 비동기적인 혼잡도 데이터를 가져옵니다.\n    const fetchPromises = AREA_CODES.map(async code => {\n      try {\n        const response = await fetch(`http://openapi.seoul.go.kr:8088/${SEOUL_OPEN_DATA_AUTH_KEY_}/json/citydata_ppltn/1/5/${code}`);\n        const data = await response.json();\n        console.log(data);\n        const personData = data['SeoulRtd.citydata_ppltn']['0']; // 안전하게 인덱스에 접근\n        if (personData) {\n          // 인구 최소 및 최대값을 숫자로 변환하여 평균을 계산합니다.\n          const minPopulation = parseInt(personData.AREA_PPLTN_MIN, 10);\n          const maxPopulation = parseInt(personData.AREA_PPLTN_MAX, 10);\n          const avgPopulation = (minPopulation + maxPopulation) / 2;\n\n          // 해당 핫플레이스의 데이터를 객체로 저장하여 결과 배열에 추가합니다.\n          results.push({\n            AREA_NM: personData.AREA_NM,\n            AREA_CD: personData.AREA_CD,\n            LIVE_PPLTN_STTS: avgPopulation,\n            AREA_CONGEST_MSG: personData.AREA_CONGEST_MSG,\n            AREA_PPLTN_MIN: minPopulation,\n            AREA_PPLTN_MAX: maxPopulation\n          });\n        }\n      } catch (error) {\n        console.error(`Error fetching data for ${code}:`, error);\n      }\n    });\n\n    // 모든 비동기 요청이 완료될 때까지 기다립니다.\n    await Promise.all(fetchPromises);\n\n    // 혼잡도 기준으로 정렬하여 상위 5개의 핫플레이스만 추출합니다.\n    const topHotPlaces = results.sort((a, b) => b.LIVE_PPLTN_STTS - a.LIVE_PPLTN_STTS).slice(0, 5);\n\n    // 상태 업데이트\n    setHotPlaces(topHotPlaces);\n  };\n  useEffect(() => {\n    fetchHotPlaces();\n  }, []);\n  const handleHotPlaceClick = async placeName => {\n    try {\n      const response = await fetch(`http://openapi.seoul.go.kr:8088/${SEOUL_OPEN_DATA_AUTH_KEY_}/json/citydata/1/5/${placeName}`);\n      const data = await response.json();\n      // 여기서 API 응답 데이터를 처리하고, 새로운 페이지로 이동하거나 팝업 창을 열 수 있습니다.\n      console.log(\"API 응답:\", data);\n      console.log(data.AREA_NM);\n\n      // 예를 들어, API 응답 데이터를 모달 창에 표시하거나 다른 페이지로 이동할 수 있습니다.\n      setSelectedPlace(data);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    className: \"hot-places-list\",\n    children: hotPlaces.map((place, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n      className: \"hot-place-item\",\n      onClick: () => handleHotPlaceClick(place),\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Top \", index + 1, \" \", place.AREA_NM]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"top_title\",\n        children: \" \\uC2E4\\uC2DC\\uAC04 \\uC778\\uAD6C \\uD604\\uD669 \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"top_content\",\n        children: [place.LIVE_PPLTN_STTS, \" \\uBA85\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"top_title\",\n        children: \" \\uC7A5\\uC18C \\uD63C\\uC7A1\\uB3C4 \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"top_content\",\n        children: place.AREA_CONGEST_MSG\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }, this)]\n    }, place.AREA_CD, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 7\n  }, this);\n}\n_s(HotPlaces, \"2vejG3pX5/xzVFBiQ0dv17dwCfY=\");\n_c = HotPlaces;\nexport default HotPlaces;\nvar _c;\n$RefreshReg$(_c, \"HotPlaces\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","SEOUL_OPEN_DATA_AUTH_KEY_","AREA_CODES","Array","from","length","_","index","number","toString","padStart","HotPlaces","_s","hotPlaces","setHotPlaces","selectedPlace","setSelectedPlace","fetchHotPlaces","results","fetchPromises","map","code","response","fetch","data","json","console","log","personData","minPopulation","parseInt","AREA_PPLTN_MIN","maxPopulation","AREA_PPLTN_MAX","avgPopulation","push","AREA_NM","AREA_CD","LIVE_PPLTN_STTS","AREA_CONGEST_MSG","error","Promise","all","topHotPlaces","sort","a","b","slice","handleHotPlaceClick","placeName","className","children","place","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/p_kxn_g/Documents/GitHub/wheresMySeoul/frontend/awes/src/hotPlace/HotPlace.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './HotPlace.css';\n\nconst SEOUL_OPEN_DATA_AUTH_KEY_= \"515653596b79756a38384a77506645\" // 서울 열린 데이터\n\n// 1부터 115까지 \"POI001\", \"POI002\", ..., \"POI115\" 형식의 리스트 생성\nconst AREA_CODES = Array.from({ length: 115 }, (_, index) => {\n    const number = (index + 1).toString().padStart(3, '0'); // 3자리 숫자로 포맷\n    return `POI${number}`;\n  });\nfunction HotPlaces() {\n  const [hotPlaces, setHotPlaces] = useState([]);\n  const [selectedPlace, setSelectedPlace] = useState(null);\n\n  const fetchHotPlaces = async () => {\n    // 결과를 저장할 배열을 초기화합니다.\n    const results = [];\n  \n    // 각 장소에 대한 비동기적인 혼잡도 데이터를 가져옵니다.\n    const fetchPromises = AREA_CODES.map(async (code) => {\n      try {\n        const response = await fetch(`http://openapi.seoul.go.kr:8088/${SEOUL_OPEN_DATA_AUTH_KEY_}/json/citydata_ppltn/1/5/${code}`);\n        const data = await response.json();\n        console.log(data)\n        const personData = data['SeoulRtd.citydata_ppltn']['0']; // 안전하게 인덱스에 접근\n        if (personData) {\n          // 인구 최소 및 최대값을 숫자로 변환하여 평균을 계산합니다.\n          const minPopulation = parseInt(personData.AREA_PPLTN_MIN, 10);\n          const maxPopulation = parseInt(personData.AREA_PPLTN_MAX, 10);\n          const avgPopulation = (minPopulation + maxPopulation) / 2;\n  \n          // 해당 핫플레이스의 데이터를 객체로 저장하여 결과 배열에 추가합니다.\n          results.push({\n            AREA_NM: personData.AREA_NM,\n            AREA_CD: personData.AREA_CD,\n            LIVE_PPLTN_STTS: avgPopulation,\n            AREA_CONGEST_MSG: personData.AREA_CONGEST_MSG,\n            AREA_PPLTN_MIN: minPopulation,\n            AREA_PPLTN_MAX: maxPopulation,\n          });\n        }\n      } catch (error) {\n        console.error(`Error fetching data for ${code}:`, error);\n      }\n    });\n  \n    // 모든 비동기 요청이 완료될 때까지 기다립니다.\n    await Promise.all(fetchPromises);\n  \n    // 혼잡도 기준으로 정렬하여 상위 5개의 핫플레이스만 추출합니다.\n    const topHotPlaces = results\n      .sort((a, b) => b.LIVE_PPLTN_STTS - a.LIVE_PPLTN_STTS)\n      .slice(0, 5);\n  \n    // 상태 업데이트\n    setHotPlaces(topHotPlaces);\n  \n  };\n\n  useEffect(() => {\n    fetchHotPlaces();\n  }, []);\n  const handleHotPlaceClick = async (placeName) => {\n    try {\n      const response = await fetch(`http://openapi.seoul.go.kr:8088/${SEOUL_OPEN_DATA_AUTH_KEY_}/json/citydata/1/5/${placeName}`);\n      const data = await response.json();\n      // 여기서 API 응답 데이터를 처리하고, 새로운 페이지로 이동하거나 팝업 창을 열 수 있습니다.\n      console.log(\"API 응답:\", data);\n      console.log(data.AREA_NM)\n\n      // 예를 들어, API 응답 데이터를 모달 창에 표시하거나 다른 페이지로 이동할 수 있습니다.\n      setSelectedPlace(data);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n  return (\n      <ul className=\"hot-places-list\">\n        {hotPlaces.map((place, index) => (\n          <li key={place.AREA_CD} className=\"hot-place-item\" onClick={() => handleHotPlaceClick(place)}>\n            <h3>Top {index + 1} {place.AREA_NM}</h3>\n            <p className='top_title'> 실시간 인구 현황 </p>\n            <p className='top_content'>{place.LIVE_PPLTN_STTS} 명</p>\n            <p className='top_title'> 장소 혼잡도 </p>\n            <p className='top_content'>{place.AREA_CONGEST_MSG}</p>\n            {/* <p className='top_title'> 최소 인구 </p>\n            <p className='top_content'>{place.AREA_PPLTN_MIN}</p>\n            <p className='top_title'> 최대 인구 </p>\n            <p className='top_content'>{place.AREA_PPLTN_MAX}</p> */}\n          \n          </li>\n        ))}\n      </ul>\n  );\n}\n\nexport default HotPlaces;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExB,MAAMC,yBAAyB,GAAE,gCAAgC,EAAC;;AAElE;AACA,MAAMC,UAAU,GAAGC,KAAK,CAACC,IAAI,CAAC;EAAEC,MAAM,EAAE;AAAI,CAAC,EAAE,CAACC,CAAC,EAAEC,KAAK,KAAK;EACzD,MAAMC,MAAM,GAAG,CAACD,KAAK,GAAG,CAAC,EAAEE,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;EACxD,OAAQ,MAAKF,MAAO,EAAC;AACvB,CAAC,CAAC;AACJ,SAASG,SAASA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACkB,aAAa,EAAEC,gBAAgB,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EAExD,MAAMoB,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC;IACA,MAAMC,OAAO,GAAG,EAAE;;IAElB;IACA,MAAMC,aAAa,GAAGjB,UAAU,CAACkB,GAAG,CAAC,MAAOC,IAAI,IAAK;MACnD,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,mCAAkCtB,yBAA0B,4BAA2BoB,IAAK,EAAC,CAAC;QAC5H,MAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAClCC,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;QACjB,MAAMI,UAAU,GAAGJ,IAAI,CAAC,yBAAyB,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACzD,IAAII,UAAU,EAAE;UACd;UACA,MAAMC,aAAa,GAAGC,QAAQ,CAACF,UAAU,CAACG,cAAc,EAAE,EAAE,CAAC;UAC7D,MAAMC,aAAa,GAAGF,QAAQ,CAACF,UAAU,CAACK,cAAc,EAAE,EAAE,CAAC;UAC7D,MAAMC,aAAa,GAAG,CAACL,aAAa,GAAGG,aAAa,IAAI,CAAC;;UAEzD;UACAd,OAAO,CAACiB,IAAI,CAAC;YACXC,OAAO,EAAER,UAAU,CAACQ,OAAO;YAC3BC,OAAO,EAAET,UAAU,CAACS,OAAO;YAC3BC,eAAe,EAAEJ,aAAa;YAC9BK,gBAAgB,EAAEX,UAAU,CAACW,gBAAgB;YAC7CR,cAAc,EAAEF,aAAa;YAC7BI,cAAc,EAAED;UAClB,CAAC,CAAC;QACJ;MACF,CAAC,CAAC,OAAOQ,KAAK,EAAE;QACdd,OAAO,CAACc,KAAK,CAAE,2BAA0BnB,IAAK,GAAE,EAAEmB,KAAK,CAAC;MAC1D;IACF,CAAC,CAAC;;IAEF;IACA,MAAMC,OAAO,CAACC,GAAG,CAACvB,aAAa,CAAC;;IAEhC;IACA,MAAMwB,YAAY,GAAGzB,OAAO,CACzB0B,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACR,eAAe,GAAGO,CAAC,CAACP,eAAe,CAAC,CACrDS,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;;IAEd;IACAjC,YAAY,CAAC6B,YAAY,CAAC;EAE5B,CAAC;EAED7C,SAAS,CAAC,MAAM;IACdmB,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;EACN,MAAM+B,mBAAmB,GAAG,MAAOC,SAAS,IAAK;IAC/C,IAAI;MACF,MAAM3B,QAAQ,GAAG,MAAMC,KAAK,CAAE,mCAAkCtB,yBAA0B,sBAAqBgD,SAAU,EAAC,CAAC;MAC3H,MAAMzB,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClC;MACAC,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEH,IAAI,CAAC;MAC5BE,OAAO,CAACC,GAAG,CAACH,IAAI,CAACY,OAAO,CAAC;;MAEzB;MACApB,gBAAgB,CAACQ,IAAI,CAAC;IACxB,CAAC,CAAC,OAAOgB,KAAK,EAAE;MACdd,OAAO,CAACc,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACF,CAAC;EACD,oBACIxC,OAAA;IAAIkD,SAAS,EAAC,iBAAiB;IAAAC,QAAA,EAC5BtC,SAAS,CAACO,GAAG,CAAC,CAACgC,KAAK,EAAE7C,KAAK,kBAC1BP,OAAA;MAAwBkD,SAAS,EAAC,gBAAgB;MAACG,OAAO,EAAEA,CAAA,KAAML,mBAAmB,CAACI,KAAK,CAAE;MAAAD,QAAA,gBAC3FnD,OAAA;QAAAmD,QAAA,GAAI,MAAI,EAAC5C,KAAK,GAAG,CAAC,EAAC,GAAC,EAAC6C,KAAK,CAAChB,OAAO;MAAA;QAAAkB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACxCzD,OAAA;QAAGkD,SAAS,EAAC,WAAW;QAAAC,QAAA,EAAC;MAAW;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACxCzD,OAAA;QAAGkD,SAAS,EAAC,aAAa;QAAAC,QAAA,GAAEC,KAAK,CAACd,eAAe,EAAC,SAAE;MAAA;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACxDzD,OAAA;QAAGkD,SAAS,EAAC,WAAW;QAAAC,QAAA,EAAC;MAAQ;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACrCzD,OAAA;QAAGkD,SAAS,EAAC,aAAa;QAAAC,QAAA,EAAEC,KAAK,CAACb;MAAgB;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA,GALhDL,KAAK,CAACf,OAAO;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAWlB,CACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEX;AAAC7C,EAAA,CApFQD,SAAS;AAAA+C,EAAA,GAAT/C,SAAS;AAsFlB,eAAeA,SAAS;AAAC,IAAA+C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}