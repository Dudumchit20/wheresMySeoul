{"ast":null,"code":"var _jsxFileName = \"/Users/p_kxn_g/Documents/GitHub/wheresMySeoul/frontend/awes/src/TextField.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { setKey, fromLatLng, fromAddress } from 'react-geocode';\nimport WeatherComponent from './weather/weather';\nimport './TextField.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GOOGLE_MAPS_API_KEY = 'AIzaSyCoBqm6ZJlc2QRPAEZ8Op36nAklnfj5DsE'; // Replace with your actual key\nconst SEOUL_OPEN_DATA_AUTH_KEY = \"515653596b79756a38384a77506645\"; // 서울 열린 데이터\nsetKey(GOOGLE_MAPS_API_KEY);\nconst touristSpots = [{\n  name: \"강남 MICE 관광특구\",\n  latitude: 37.5139,\n  longitude: 127.0581\n}, {\n  name: \"동대문 관광특구\",\n  latitude: 37.5711,\n  longitude: 127.0094\n}, {\n  name: \"명동 관광특구\",\n  latitude: 37.5637,\n  longitude: 126.9857\n}, {\n  name: \"이태원 관광특구\",\n  latitude: 37.5345,\n  longitude: 126.9937\n}\n// 추가적인 관광특구들...\n];\nfunction calculateDistance(lat1, lon1, lat2, lon2) {\n  const R = 6371; // 지구 반경 (km)\n  const dLat = (lat2 - lat1) * (Math.PI / 180);\n  const dLon = (lon2 - lon1) * (Math.PI / 180);\n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1 * (Math.PI / 180)) * Math.cos(lat2 * (Math.PI / 180)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c; // 거리 (km)\n}\nfunction findClosestTouristSpot(latitude, longitude) {\n  let closestSpot = touristSpots[0];\n  let minDistance = calculateDistance(latitude, longitude, closestSpot.latitude, closestSpot.longitude);\n  for (const spot of touristSpots) {\n    const distance = calculateDistance(latitude, longitude, spot.latitude, spot.longitude);\n    if (distance < minDistance) {\n      closestSpot = spot;\n      minDistance = distance;\n    }\n  }\n  return closestSpot;\n}\nfunction LocationSearchField() {\n  _s();\n  const inputStyle = {\n    color: 'black',\n    border: '0px solid gray',\n    borderRadius: '5px',\n    width: '100%',\n    height: '40px',\n    margin: '0px 10px',\n    outline: 'none'\n  };\n  const textFieldStyle = {\n    flex: 1,\n    fontSize: '20px',\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center'\n  };\n  const [inputValue, setInputValue] = useState('');\n  const [currentLocation, setCurrentLocation] = useState('');\n  const [closestTouristSpot, setClosestTouristSpot] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n  const [weatherData, setWeatherData] = useState(null);\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        fromLatLng(latitude, longitude).then(({\n          results\n        }) => {\n          if (results && results.length > 0) {\n            const address = results[0].formatted_address;\n            setCurrentLocation(address);\n            setInputValue(address);\n          } else {\n            setInputValue('Unable to find address.');\n          }\n          const closestSpot = findClosestTouristSpot(latitude, longitude);\n          setClosestTouristSpot(closestSpot.name);\n          fetchWeatherData(closestSpot.name);\n        }).catch(error => {\n          console.error('Geocoding error:', error);\n          setInputValue('Geocoding error.');\n        });\n      }, error => {\n        console.error('Geolocation error:', error);\n        setInputValue('Location access denied.');\n      });\n    } else {\n      setInputValue('Geolocation not supported.');\n    }\n  }, []);\n  const fetchWeatherData = async spotName => {\n    try {\n      console.log(\"관광특구 확인\", spotName);\n      const response = await fetch(`http://openapi.seoul.go.kr:8088/${SEOUL_OPEN_DATA_AUTH_KEY}/json/citydata/1/5/${spotName}`);\n      const data = await response.json();\n      // 이 부분에서 응답 데이터 구조에 맞게 데이터를 추출하세요\n      const {\n        temperature,\n        precipitation,\n        humidity,\n        windSpeed\n      } = data; // 응답에 맞게 변경해야 합니다.\n      setWeatherData({\n        temperature,\n        precipitation,\n        humidity,\n        windSpeed\n      });\n    } catch (error) {\n      console.error('Error fetching weather data:', error);\n    }\n  };\n  const handleSearch = () => {\n    fromAddress(inputValue).then(({\n      results\n    }) => {\n      if (results && results.length > 0) {\n        setSearchResults(results);\n        const {\n          location\n        } = results[0].geometry;\n        const closestSpot = findClosestTouristSpot(location.lat, location.lng);\n        setClosestTouristSpot(closestSpot.name);\n        fetchWeatherData(closestSpot.name);\n      } else {\n        setSearchResults([{\n          formatted_address: '주소를 찾지 못했습니다.'\n        }]);\n      }\n    }).catch(error => {\n      console.error('Geocoding error:', error);\n      setSearchResults([{\n        formatted_address: '주소를 찾지 못했습니다.'\n      }]);\n    });\n  };\n  const handleChange = event => {\n    setInputValue(event.target.value);\n  };\n  const handleKeyPress = event => {\n    if (event.key === 'Enter') {\n      handleSearch();\n    }\n  };\n  const handleClear = () => {\n    setInputValue('');\n    setCurrentLocation('');\n    setSearchResults([]);\n  };\n  const handleSuggestionClick = address => {\n    setInputValue(address);\n    setSearchResults([]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"textfield_container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"location_button\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button_none\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"/png/search.png\",\n          alt: \"search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: textFieldStyle,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: inputValue,\n          onChange: handleChange,\n          onKeyPress: handleKeyPress,\n          style: inputStyle,\n          placeholder: \"\\uD604\\uC7AC \\uC704\\uCE58 \\uD639\\uC740 \\uC6D0\\uD558\\uB294 \\uC704\\uCE58\\uB97C \\uAC80\\uC0C9\\uD574\\uBCF4\\uC138\\uC694\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button_none\",\n          onClick: handleClear,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"/png/close.png\",\n            alt: \"close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), searchResults.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"results_dropdown\",\n      children: searchResults.map((result, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"result_row\",\n        onClick: result.formatted_address !== '주소를 찾지 못했습니다.' ? () => handleSuggestionClick(result.formatted_address) : null,\n        children: result.formatted_address\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 9\n    }, this), closestTouristSpot && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"closest_spot_info\",\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"\\uAC00\\uC7A5 \\uAC00\\uAE4C\\uC6B4 \\uAD00\\uAD11\\uD2B9\\uAD6C:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 11\n      }, this), \" \", closestTouristSpot]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 5\n  }, this);\n}\n_s(LocationSearchField, \"wuhYax2H4boueWPL8te1+7seutA=\");\n_c = LocationSearchField;\nexport default LocationSearchField;\nvar _c;\n$RefreshReg$(_c, \"LocationSearchField\");","map":{"version":3,"names":["React","useState","useEffect","setKey","fromLatLng","fromAddress","WeatherComponent","jsxDEV","_jsxDEV","GOOGLE_MAPS_API_KEY","SEOUL_OPEN_DATA_AUTH_KEY","touristSpots","name","latitude","longitude","calculateDistance","lat1","lon1","lat2","lon2","R","dLat","Math","PI","dLon","a","sin","cos","c","atan2","sqrt","findClosestTouristSpot","closestSpot","minDistance","spot","distance","LocationSearchField","_s","inputStyle","color","border","borderRadius","width","height","margin","outline","textFieldStyle","flex","fontSize","display","flexDirection","alignItems","inputValue","setInputValue","currentLocation","setCurrentLocation","closestTouristSpot","setClosestTouristSpot","searchResults","setSearchResults","weatherData","setWeatherData","navigator","geolocation","getCurrentPosition","position","coords","then","results","length","address","formatted_address","fetchWeatherData","catch","error","console","spotName","log","response","fetch","data","json","temperature","precipitation","humidity","windSpeed","handleSearch","location","geometry","lat","lng","handleChange","event","target","value","handleKeyPress","key","handleClear","handleSuggestionClick","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","style","type","onChange","onKeyPress","placeholder","onClick","map","result","index","_c","$RefreshReg$"],"sources":["/Users/p_kxn_g/Documents/GitHub/wheresMySeoul/frontend/awes/src/TextField.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { setKey, fromLatLng, fromAddress } from 'react-geocode';\nimport WeatherComponent from './weather/weather';\nimport './TextField.css';\n\nconst GOOGLE_MAPS_API_KEY = 'AIzaSyCoBqm6ZJlc2QRPAEZ8Op36nAklnfj5DsE'; // Replace with your actual key\nconst SEOUL_OPEN_DATA_AUTH_KEY = \"515653596b79756a38384a77506645\"; // 서울 열린 데이터\nsetKey(GOOGLE_MAPS_API_KEY);\n\nconst touristSpots = [\n  { name: \"강남 MICE 관광특구\", latitude: 37.5139, longitude: 127.0581 },\n  { name: \"동대문 관광특구\", latitude: 37.5711, longitude: 127.0094 },\n  { name: \"명동 관광특구\", latitude: 37.5637, longitude: 126.9857 },\n  { name: \"이태원 관광특구\", latitude: 37.5345, longitude: 126.9937 },\n  // 추가적인 관광특구들...\n];\n\nfunction calculateDistance(lat1, lon1, lat2, lon2) {\n  const R = 6371; // 지구 반경 (km)\n  const dLat = (lat2 - lat1) * (Math.PI / 180);\n  const dLon = (lon2 - lon1) * (Math.PI / 180);\n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n            Math.cos(lat1 * (Math.PI / 180)) * Math.cos(lat2 * (Math.PI / 180)) *\n            Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c; // 거리 (km)\n}\n\nfunction findClosestTouristSpot(latitude, longitude) {\n  let closestSpot = touristSpots[0];\n  let minDistance = calculateDistance(latitude, longitude, closestSpot.latitude, closestSpot.longitude);\n\n  for (const spot of touristSpots) {\n    const distance = calculateDistance(latitude, longitude, spot.latitude, spot.longitude);\n    if (distance < minDistance) {\n      closestSpot = spot;\n      minDistance = distance;\n    }\n  }\n\n  return closestSpot;\n}\n\nfunction LocationSearchField() {\n  const inputStyle = {\n    color: 'black',\n    border: '0px solid gray',\n    borderRadius: '5px',\n    width: '100%',\n    height: '40px',\n    margin: '0px 10px',\n    outline: 'none',\n  };\n\n  const textFieldStyle = {\n    flex: 1,\n    fontSize: '20px',\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n  };\n\n  const [inputValue, setInputValue] = useState('');\n  const [currentLocation, setCurrentLocation] = useState('');\n  const [closestTouristSpot, setClosestTouristSpot] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n  const [weatherData, setWeatherData] = useState(null);\n\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const { latitude, longitude } = position.coords;\n          fromLatLng(latitude, longitude)\n            .then(({ results }) => {\n              if (results && results.length > 0) {\n                const address = results[0].formatted_address;\n                setCurrentLocation(address);\n                setInputValue(address);\n              } else {\n                setInputValue('Unable to find address.');\n              }\n              const closestSpot = findClosestTouristSpot(latitude, longitude);\n              setClosestTouristSpot(closestSpot.name);\n              fetchWeatherData(closestSpot.name);\n            })\n            .catch((error) => {\n              console.error('Geocoding error:', error);\n              setInputValue('Geocoding error.');\n            });\n        },\n        (error) => {\n          console.error('Geolocation error:', error);\n          setInputValue('Location access denied.');\n        }\n      );\n    } else {\n      setInputValue('Geolocation not supported.');\n    }\n  }, []);\n\n  const fetchWeatherData = async (spotName) => {\n    try {\n      console.log(\"관광특구 확인\",spotName )\n      const response = await fetch(`http://openapi.seoul.go.kr:8088/${SEOUL_OPEN_DATA_AUTH_KEY}/json/citydata/1/5/${spotName}`);\n      const data = await response.json();\n      // 이 부분에서 응답 데이터 구조에 맞게 데이터를 추출하세요\n      const { temperature, precipitation, humidity, windSpeed } = data; // 응답에 맞게 변경해야 합니다.\n      setWeatherData({ temperature, precipitation, humidity, windSpeed });\n    } catch (error) {\n      console.error('Error fetching weather data:', error);\n    }\n  };\n\n  const handleSearch = () => {\n    fromAddress(inputValue)\n      .then(({ results }) => {\n        if (results && results.length > 0) {\n          setSearchResults(results);\n          const { location } = results[0].geometry;\n          const closestSpot = findClosestTouristSpot(location.lat, location.lng);\n          setClosestTouristSpot(closestSpot.name);\n          fetchWeatherData(closestSpot.name);\n        } else {\n          setSearchResults([{ formatted_address: '주소를 찾지 못했습니다.' }]);\n        }\n      })\n      .catch((error) => {\n        console.error('Geocoding error:', error);\n        setSearchResults([{ formatted_address: '주소를 찾지 못했습니다.' }]);\n      });\n  };\n\n  const handleChange = (event) => {\n    setInputValue(event.target.value);\n  };\n\n  const handleKeyPress = (event) => {\n    if (event.key === 'Enter') {\n      handleSearch();\n    }\n  };\n\n  const handleClear = () => {\n    setInputValue('');\n    setCurrentLocation('');\n    setSearchResults([]);\n  };\n\n  const handleSuggestionClick = (address) => {\n    setInputValue(address);\n    setSearchResults([]);\n  };\n\n  return (\n    <div className='textfield_container'>\n      <div className=\"location_button\">\n        <button className=\"button_none\">\n          <img src=\"/png/search.png\" alt=\"search\" />\n        </button>\n        <div style={textFieldStyle}>\n          <input\n            type=\"text\"\n            value={inputValue}\n            onChange={handleChange}\n            onKeyPress={handleKeyPress}\n            style={inputStyle}\n            placeholder=\"현재 위치 혹은 원하는 위치를 검색해보세요\"\n          />\n          <button className=\"button_none\" onClick={handleClear}>\n            <img src=\"/png/close.png\" alt=\"close\" />\n          </button>\n        </div>\n      </div>\n     \n      {/* 검색 결과 표시 */}\n      {searchResults.length > 0 && (\n        <div className=\"results_dropdown\">\n          {searchResults.map((result, index) => (\n            <div\n              key={index}\n              className=\"result_row\"\n              onClick={\n                result.formatted_address !== '주소를 찾지 못했습니다.' ? () => handleSuggestionClick(result.formatted_address) : null\n              }\n            >\n              {result.formatted_address}\n            </div>\n          ))}\n        </div>\n      )}\n\n      {/* 가장 가까운 관광특구 표시 */}\n      {closestTouristSpot && (\n        <div className=\"closest_spot_info\">\n          <strong>가장 가까운 관광특구:</strong> {closestTouristSpot}\n        </div>\n      )}\n\n    </div>\n  );\n}\n\nexport default LocationSearchField;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}