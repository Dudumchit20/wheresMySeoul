{"ast":null,"code":"var _jsxFileName = \"/Users/p_kxn_g/Documents/GitHub/wheresMySeoul/frontend/awes/src/hotPlace/Map.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\nimport \"./Map.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  width: '100%',\n  height: '400px'\n};\nconst defaultCenter = {\n  lat: 37.5665,\n  lng: 126.9780\n};\nconst markerIcons = {\n  \"자전거\": \"http://maps.google.com/mapfiles/ms/icons/green-dot.png\",\n  \"주차장\": \"http://maps.google.com/mapfiles/ms/icons/blue-dot.png\",\n  \"문화\": \"http://maps.google.com/mapfiles/ms/icons/red-dot.png\",\n  \"지하철\": \"http://maps.google.com/mapfiles/ms/icons/yellow-dot.png\"\n};\nconst Map = ({\n  inf1,\n  inf2,\n  inf3,\n  inf4,\n  selectedFilters\n}) => {\n  _s();\n  const [currentPosition, setCurrentPosition] = useState(defaultCenter);\n  const [selectedMarker, setSelectedMarker] = useState(null);\n  const [markers, setMarkers] = useState([]);\n  useEffect(() => {\n    if ('geolocation' in navigator) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        setCurrentPosition({\n          lat: latitude,\n          lng: longitude\n        });\n      }, () => {\n        console.error(\"Geolocation is not supported or permission denied.\");\n      });\n    } else {\n      console.error(\"Geolocation is not supported by this browser.\");\n    }\n  }, []);\n  useEffect(() => {\n    // inf1, inf2, inf3, inf4 정보가 모두 유효한 경우에만 처리\n    if (inf1 && inf2 && inf3 && inf4) {\n      const allMarkers = integrateData(inf1, inf2, inf3, inf4);\n      setMarkers(allMarkers);\n    }\n  }, [inf1, inf2, inf3, inf4]);\n  const integrateData = (inf1, inf2, inf3, inf4) => {\n    const filteredMarkers = [];\n\n    // 필터링된 마커 생성\n    inf1.forEach(event => {\n      if (selectedFilters.includes(\"문화\")) {\n        // 선택된 필터에 문화가 포함되어 있을 경우에만 마커 추가\n        const {\n          EVENT_X,\n          EVENT_Y,\n          EVENT_NM,\n          EVENT_PLACE,\n          EVENT_PERIOD,\n          URL,\n          THUMBNAIL\n        } = event;\n        filteredMarkers.push({\n          lat: parseFloat(EVENT_Y),\n          lng: parseFloat(EVENT_X),\n          type: \"문화\",\n          detail: {\n            name: EVENT_NM,\n            place: EVENT_PLACE,\n            period: EVENT_PERIOD,\n            url: URL,\n            thumbnail: THUMBNAIL\n          }\n        });\n      }\n    });\n\n    // 선택된 필터에 따라 마커 필터링\n    // inf2, inf3, inf4에 대해서도 동일한 방식으로 필터링 작업 수행\n\n    return filteredMarkers;\n  };\n  const handleMarkerClick = marker => {\n    setSelectedMarker(marker);\n  };\n  return /*#__PURE__*/_jsxDEV(LoadScript, {\n    googleMapsApiKey: \"AIzaSyCoBqm6ZJlc2QRPAEZ8Op36nAklnfj5DsE\",\n    children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: containerStyle,\n      center: currentPosition,\n      zoom: 13,\n      children: [/*#__PURE__*/_jsxDEV(Marker, {\n        position: currentPosition,\n        title: \"\\uD604\\uC7AC \\uC704\\uCE58\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), markers.map((marker, index) => /*#__PURE__*/_jsxDEV(Marker, {\n        position: {\n          lat: marker.lat,\n          lng: marker.lng\n        },\n        icon: markerIcons[marker.type] || \"http://maps.google.com/mapfiles/ms/icons/yellow-dot.png\",\n        title: marker.detail.name,\n        onClick: () => handleMarkerClick(marker)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this)), selectedMarker && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"info-window\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n_s(Map, \"TRrYcjOK573A8QMazbCKu9fal1w=\");\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useEffect","useState","GoogleMap","LoadScript","Marker","jsxDEV","_jsxDEV","containerStyle","width","height","defaultCenter","lat","lng","markerIcons","Map","inf1","inf2","inf3","inf4","selectedFilters","_s","currentPosition","setCurrentPosition","selectedMarker","setSelectedMarker","markers","setMarkers","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","console","error","allMarkers","integrateData","filteredMarkers","forEach","event","includes","EVENT_X","EVENT_Y","EVENT_NM","EVENT_PLACE","EVENT_PERIOD","URL","THUMBNAIL","push","parseFloat","type","detail","name","place","period","url","thumbnail","handleMarkerClick","marker","googleMapsApiKey","children","mapContainerStyle","center","zoom","title","fileName","_jsxFileName","lineNumber","columnNumber","map","index","icon","onClick","className","_c","$RefreshReg$"],"sources":["/Users/p_kxn_g/Documents/GitHub/wheresMySeoul/frontend/awes/src/hotPlace/Map.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\nimport \"./Map.css\";\n\nconst containerStyle = {\n  width: '100%',\n  height: '400px'\n};\n\nconst defaultCenter = {\n  lat: 37.5665,\n  lng: 126.9780\n};\n\nconst markerIcons = {\n  \"자전거\": \"http://maps.google.com/mapfiles/ms/icons/green-dot.png\",\n  \"주차장\": \"http://maps.google.com/mapfiles/ms/icons/blue-dot.png\",\n  \"문화\": \"http://maps.google.com/mapfiles/ms/icons/red-dot.png\",\n  \"지하철\": \"http://maps.google.com/mapfiles/ms/icons/yellow-dot.png\"\n};\n\nconst Map = ({ inf1, inf2, inf3, inf4, selectedFilters }) => {\n  const [currentPosition, setCurrentPosition] = useState(defaultCenter);\n  const [selectedMarker, setSelectedMarker] = useState(null);\n  const [markers, setMarkers] = useState([]);\n\n  useEffect(() => {\n    if ('geolocation' in navigator) {\n      navigator.geolocation.getCurrentPosition((position) => {\n        const { latitude, longitude } = position.coords;\n        setCurrentPosition({\n          lat: latitude,\n          lng: longitude\n        });\n      }, () => {\n        console.error(\"Geolocation is not supported or permission denied.\");\n      });\n    } else {\n      console.error(\"Geolocation is not supported by this browser.\");\n    }\n  }, []);\n\n  useEffect(() => {\n    // inf1, inf2, inf3, inf4 정보가 모두 유효한 경우에만 처리\n    if (inf1 && inf2 && inf3 && inf4) {\n      const allMarkers = integrateData(inf1, inf2, inf3, inf4);\n      setMarkers(allMarkers);\n    }\n  }, [inf1, inf2, inf3, inf4]);\n\n  const integrateData = (inf1, inf2, inf3, inf4) => {\n    const filteredMarkers = [];\n\n    // 필터링된 마커 생성\n    inf1.forEach((event) => {\n      if (selectedFilters.includes(\"문화\")) {\n        // 선택된 필터에 문화가 포함되어 있을 경우에만 마커 추가\n        const { EVENT_X, EVENT_Y, EVENT_NM, EVENT_PLACE, EVENT_PERIOD, URL, THUMBNAIL } = event;\n        filteredMarkers.push({\n          lat: parseFloat(EVENT_Y),\n          lng: parseFloat(EVENT_X),\n          type: \"문화\",\n          detail: {\n            name: EVENT_NM,\n            place: EVENT_PLACE,\n            period: EVENT_PERIOD,\n            url: URL,\n            thumbnail: THUMBNAIL\n          }\n        });\n      }\n    });\n\n    // 선택된 필터에 따라 마커 필터링\n    // inf2, inf3, inf4에 대해서도 동일한 방식으로 필터링 작업 수행\n\n    return filteredMarkers;\n  }\n\n  const handleMarkerClick = (marker) => {\n    setSelectedMarker(marker);\n  };\n\n  return (\n    <LoadScript googleMapsApiKey=\"AIzaSyCoBqm6ZJlc2QRPAEZ8Op36nAklnfj5DsE\">\n      <GoogleMap\n        mapContainerStyle={containerStyle}\n        center={currentPosition}\n        zoom={13}\n      >\n        {/* 현재 위치 마커 */}\n        <Marker position={currentPosition} title=\"현재 위치\" />\n\n        {/* 응답 데이터 마커 */}\n        {markers.map((marker, index) => (\n          <Marker\n            key={index}\n            position={{ lat: marker.lat, lng: marker.lng }}\n            icon={markerIcons[marker.type] || \"http://maps.google.com/mapfiles/ms/icons/yellow-dot.png\"}\n            title={marker.detail.name}\n            onClick={() => handleMarkerClick(marker)}\n          />\n        ))}\n\n        {/* 선택된 마커에 대한 상세 정보 표시 */}\n        {selectedMarker && (\n          <div className=\"info-window\">\n            {/* 상세 정보 표시 내용 */}\n          </div>\n        )}\n      </GoogleMap>\n    </LoadScript>\n  );\n};\n\nexport default Map;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}