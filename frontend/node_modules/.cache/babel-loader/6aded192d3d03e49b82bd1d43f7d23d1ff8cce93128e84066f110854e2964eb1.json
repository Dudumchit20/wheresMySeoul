{"ast":null,"code":"var _jsxFileName = \"/Users/p_kxn_g/Documents/GitHub/wheresMySeoul/frontend/awes/src/hotPlace/HotPlace.js\",\n  _s = $RefreshSig$();\n// HotPlaces.js\nimport React, { useState, useEffect } from 'react';\nimport './HotPlace.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SEOUL_OPEN_DATA_AUTH_KEY = \"515653596b79756a38384a77506645\"; // Replace with actual API key\n\nfunction HotPlaces() {\n  _s();\n  const [hotPlaces, setHotPlaces] = useState([]);\n  const fetchHotPlaces = async () => {\n    try {\n      // 서울 열린 데이터 API를 통해 모든 관광특구의 실시간 인구 현황을 가져옵니다.\n      const response = await fetch(`http://openapi.seoul.go.kr:8088/${SEOUL_OPEN_DATA_AUTH_KEY}/json/TouristSpotCongestion/1/115`);\n      const data = await response.json();\n      const spots = data.TOURISTSPOTCONGESTION.row;\n\n      // 실시간 혼잡도를 기준으로 정렬하고 상위 5개의 관광특구만 추출합니다.\n      const topHotPlaces = spots.sort((a, b) => b.LIVE_PPLTN_STTS - a.LIVE_PPLTN_STTS).slice(0, 5);\n      setHotPlaces(topHotPlaces);\n    } catch (error) {\n      console.error('Error fetching hot places:', error);\n    }\n  };\n  useEffect(() => {\n    fetchHotPlaces();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"hot-places-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uAC00\\uC7A5 \\uD63C\\uC7A1\\uD55C \\uC11C\\uC6B8\\uC758 \\uD56B\\uD50C\\uB808\\uC774\\uC2A4 5\\uACF3\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"hot-places-list\",\n      children: hotPlaces.map(place => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"hot-place-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: place.AREA_NM\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\uC2E4\\uC2DC\\uAC04 \\uC778\\uAD6C \\uD604\\uD669: \", place.LIVE_PPLTN_STTS]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\uC7A5\\uC18C \\uD63C\\uC7A1\\uB3C4: \", place.AREA_CONGEST_MSG]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\uCD5C\\uC18C \\uC778\\uAD6C: \", place.AREA_PPLTN_MIN, \", \\uCD5C\\uB300 \\uC778\\uAD6C: \", place.AREA_PPLTN_MAX]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this)]\n      }, place.AREA_CD, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n_s(HotPlaces, \"aTrkL4F8GwbR9Iccveitu5IGL9g=\");\n_c = HotPlaces;\nexport default HotPlaces;\nvar _c;\n$RefreshReg$(_c, \"HotPlaces\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","SEOUL_OPEN_DATA_AUTH_KEY","HotPlaces","_s","hotPlaces","setHotPlaces","fetchHotPlaces","response","fetch","data","json","spots","TOURISTSPOTCONGESTION","row","topHotPlaces","sort","a","b","LIVE_PPLTN_STTS","slice","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","place","AREA_NM","AREA_CONGEST_MSG","AREA_PPLTN_MIN","AREA_PPLTN_MAX","AREA_CD","_c","$RefreshReg$"],"sources":["/Users/p_kxn_g/Documents/GitHub/wheresMySeoul/frontend/awes/src/hotPlace/HotPlace.js"],"sourcesContent":["// HotPlaces.js\nimport React, { useState, useEffect } from 'react';\nimport './HotPlace.css';\n\nconst SEOUL_OPEN_DATA_AUTH_KEY = \"515653596b79756a38384a77506645\"; // Replace with actual API key\n\nfunction HotPlaces() {\n  const [hotPlaces, setHotPlaces] = useState([]);\n\n  const fetchHotPlaces = async () => {\n    try {\n      // 서울 열린 데이터 API를 통해 모든 관광특구의 실시간 인구 현황을 가져옵니다.\n      const response = await fetch(`http://openapi.seoul.go.kr:8088/${SEOUL_OPEN_DATA_AUTH_KEY}/json/TouristSpotCongestion/1/115`);\n      const data = await response.json();\n      const spots = data.TOURISTSPOTCONGESTION.row;\n\n      // 실시간 혼잡도를 기준으로 정렬하고 상위 5개의 관광특구만 추출합니다.\n      const topHotPlaces = spots\n        .sort((a, b) => b.LIVE_PPLTN_STTS - a.LIVE_PPLTN_STTS)\n        .slice(0, 5);\n\n      setHotPlaces(topHotPlaces);\n    } catch (error) {\n      console.error('Error fetching hot places:', error);\n    }\n  };\n\n  useEffect(() => {\n    fetchHotPlaces();\n  }, []);\n\n  return (\n    <div className=\"hot-places-container\">\n      <h2>가장 혼잡한 서울의 핫플레이스 5곳</h2>\n      <ul className=\"hot-places-list\">\n        {hotPlaces.map((place) => (\n          <li key={place.AREA_CD} className=\"hot-place-item\">\n            <h3>{place.AREA_NM}</h3>\n            <p>실시간 인구 현황: {place.LIVE_PPLTN_STTS}</p>\n            <p>장소 혼잡도: {place.AREA_CONGEST_MSG}</p>\n            <p>최소 인구: {place.AREA_PPLTN_MIN}, 최대 인구: {place.AREA_PPLTN_MAX}</p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default HotPlaces;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExB,MAAMC,wBAAwB,GAAG,gCAAgC,CAAC,CAAC;;AAEnE,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAE9C,MAAMS,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI;MACF;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,mCAAkCP,wBAAyB,mCAAkC,CAAC;MAC5H,MAAMQ,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClC,MAAMC,KAAK,GAAGF,IAAI,CAACG,qBAAqB,CAACC,GAAG;;MAE5C;MACA,MAAMC,YAAY,GAAGH,KAAK,CACvBI,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACC,eAAe,GAAGF,CAAC,CAACE,eAAe,CAAC,CACrDC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;MAEdd,YAAY,CAACS,YAAY,CAAC;IAC5B,CAAC,CAAC,OAAOM,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IACpD;EACF,CAAC;EAEDtB,SAAS,CAAC,MAAM;IACdQ,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEN,OAAA;IAAKsB,SAAS,EAAC,sBAAsB;IAAAC,QAAA,gBACnCvB,OAAA;MAAAuB,QAAA,EAAI;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC5B3B,OAAA;MAAIsB,SAAS,EAAC,iBAAiB;MAAAC,QAAA,EAC5BnB,SAAS,CAACwB,GAAG,CAAEC,KAAK,iBACnB7B,OAAA;QAAwBsB,SAAS,EAAC,gBAAgB;QAAAC,QAAA,gBAChDvB,OAAA;UAAAuB,QAAA,EAAKM,KAAK,CAACC;QAAO;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACxB3B,OAAA;UAAAuB,QAAA,GAAG,gDAAW,EAACM,KAAK,CAACX,eAAe;QAAA;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACzC3B,OAAA;UAAAuB,QAAA,GAAG,mCAAQ,EAACM,KAAK,CAACE,gBAAgB;QAAA;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACvC3B,OAAA;UAAAuB,QAAA,GAAG,6BAAO,EAACM,KAAK,CAACG,cAAc,EAAC,+BAAS,EAACH,KAAK,CAACI,cAAc;QAAA;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA,GAJ5DE,KAAK,CAACK,OAAO;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKlB,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV;AAACxB,EAAA,CAxCQD,SAAS;AAAAiC,EAAA,GAATjC,SAAS;AA0ClB,eAAeA,SAAS;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}