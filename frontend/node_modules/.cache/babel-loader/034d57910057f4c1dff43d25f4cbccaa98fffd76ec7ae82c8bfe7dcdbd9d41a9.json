{"ast":null,"code":"var _jsxFileName = \"/Users/p_kxn_g/Documents/GitHub/wheresMySeoul/frontend/awes/src/hotPlace/HotPlace.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './HotPlace.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SEOUL_OPEN_DATA_AUTH_KEY = \"515653596b79756a38384a77506645\"; // 서울 열린 데이터\nconst AREA_CODES = [\"POI001\", \"POI002\", \"POI003\", \"POI004\", \"POI005\", \"POI006\", \"POI007\", \"POI008\",\n// ... 중략: 나머지 코드 모두 추가\n\"POI115\"];\nfunction HotPlaces() {\n  _s();\n  const [hotPlaces, setHotPlaces] = useState([]);\n  const fetchHotPlaces = async () => {\n    const results = [];\n\n    // 각 장소에 대해 비동기적으로 혼잡도 데이터를 가져옵니다.\n    const fetchPromises = AREA_CODES.map(async code => {\n      try {\n        const response = await fetch(`http://openapi.seoul.go.kr:8088/${SEOUL_OPEN_DATA_AUTH_KEY}/json/citydata_ppltn/1/5/${code}`);\n        const data = await response.json();\n        console.log(data);\n        if (data.citydata_ppltn && data.citydata_ppltn.row.length > 0) {\n          results.push(data.citydata_ppltn.row[0]);\n        }\n      } catch (error) {\n        console.error(`Error fetching data for ${code}:`, error);\n      }\n    });\n\n    // 모든 요청이 완료될 때까지 기다립니다.\n    await Promise.all(fetchPromises);\n\n    // 혼잡도 기준으로 정렬하여 상위 5개의 핫플레이스만 추출합니다.\n    const topHotPlaces = results.sort((a, b) => b.LIVE_PPLTN_STTS - a.LIVE_PPLTN_STTS).slice(0, 5);\n    setHotPlaces(topHotPlaces);\n  };\n  useEffect(() => {\n    fetchHotPlaces();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"hot-places-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uAC00\\uC7A5 \\uD63C\\uC7A1\\uD55C \\uC11C\\uC6B8\\uC758 \\uD56B\\uD50C\\uB808\\uC774\\uC2A4 5\\uACF3\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"hot-places-list\",\n      children: hotPlaces.map(place => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"hot-place-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: place.AREA_NM\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\uC2E4\\uC2DC\\uAC04 \\uC778\\uAD6C \\uD604\\uD669: \", place.LIVE_PPLTN_STTS]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\uC7A5\\uC18C \\uD63C\\uC7A1\\uB3C4: \", place.AREA_CONGEST_MSG]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\uCD5C\\uC18C \\uC778\\uAD6C: \", place.AREA_PPLTN_MIN, \", \\uCD5C\\uB300 \\uC778\\uAD6C: \", place.AREA_PPLTN_MAX]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this)]\n      }, place.AREA_CD, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n_s(HotPlaces, \"aTrkL4F8GwbR9Iccveitu5IGL9g=\");\n_c = HotPlaces;\nexport default HotPlaces;\nvar _c;\n$RefreshReg$(_c, \"HotPlaces\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","SEOUL_OPEN_DATA_AUTH_KEY","AREA_CODES","HotPlaces","_s","hotPlaces","setHotPlaces","fetchHotPlaces","results","fetchPromises","map","code","response","fetch","data","json","console","log","citydata_ppltn","row","length","push","error","Promise","all","topHotPlaces","sort","a","b","LIVE_PPLTN_STTS","slice","className","children","fileName","_jsxFileName","lineNumber","columnNumber","place","AREA_NM","AREA_CONGEST_MSG","AREA_PPLTN_MIN","AREA_PPLTN_MAX","AREA_CD","_c","$RefreshReg$"],"sources":["/Users/p_kxn_g/Documents/GitHub/wheresMySeoul/frontend/awes/src/hotPlace/HotPlace.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './HotPlace.css';\n\nconst SEOUL_OPEN_DATA_AUTH_KEY = \"515653596b79756a38384a77506645\" // 서울 열린 데이터\nconst AREA_CODES = [\n  \"POI001\", \"POI002\", \"POI003\", \"POI004\", \"POI005\", \"POI006\", \"POI007\", \"POI008\",\n  // ... 중략: 나머지 코드 모두 추가\n  \"POI115\"\n];\n\nfunction HotPlaces() {\n  const [hotPlaces, setHotPlaces] = useState([]);\n  \n  const fetchHotPlaces = async () => {\n    const results = [];\n\n    // 각 장소에 대해 비동기적으로 혼잡도 데이터를 가져옵니다.\n    const fetchPromises = AREA_CODES.map(async (code) => {\n      try {\n        const response = await fetch(`http://openapi.seoul.go.kr:8088/${SEOUL_OPEN_DATA_AUTH_KEY}/json/citydata_ppltn/1/5/${code}`);\n        const data = await response.json();\n        console.log(data)\n        if (data.citydata_ppltn && data.citydata_ppltn.row.length > 0) {\n          results.push(data.citydata_ppltn.row[0]);\n        }\n      } catch (error) {\n        console.error(`Error fetching data for ${code}:`, error);\n      }\n    });\n\n    // 모든 요청이 완료될 때까지 기다립니다.\n    await Promise.all(fetchPromises);\n\n    // 혼잡도 기준으로 정렬하여 상위 5개의 핫플레이스만 추출합니다.\n    const topHotPlaces = results\n      .sort((a, b) => b.LIVE_PPLTN_STTS - a.LIVE_PPLTN_STTS)\n      .slice(0, 5);\n\n    setHotPlaces(topHotPlaces);\n  };\n\n  useEffect(() => {\n    fetchHotPlaces();\n  }, []);\n\n  return (\n    <div className=\"hot-places-container\">\n      <h2>가장 혼잡한 서울의 핫플레이스 5곳</h2>\n      <ul className=\"hot-places-list\">\n        {hotPlaces.map((place) => (\n          <li key={place.AREA_CD} className=\"hot-place-item\">\n            <h3>{place.AREA_NM}</h3>\n            <p>실시간 인구 현황: {place.LIVE_PPLTN_STTS}</p>\n            <p>장소 혼잡도: {place.AREA_CONGEST_MSG}</p>\n            <p>최소 인구: {place.AREA_PPLTN_MIN}, 최대 인구: {place.AREA_PPLTN_MAX}</p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default HotPlaces;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}