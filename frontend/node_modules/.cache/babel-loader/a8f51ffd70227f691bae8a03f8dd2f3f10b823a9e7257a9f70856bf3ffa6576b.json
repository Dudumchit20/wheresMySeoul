{"ast":null,"code":"var _jsxFileName = \"/Users/p_kxn_g/Documents/GitHub/awes0514/src/language/LanSelection.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport \"../recommend/FilterButtons.css\";\nimport \"../App.css\";\nimport \"../Home.css\";\nimport { useTranslation } from 'react-i18next';\nimport i18n from \"../locales/i18n.ts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FilterButtons = () => {\n  _s();\n  // 현재 선택된 버튼의 인덱스를 추적하는 상태 변수\n  const [selectedButtonIndex, setSelectedButtonIndex] = useState(null);\n  const handleButtonClick = index => {\n    setSelectedButtonIndex(index); // 선택된 버튼의 인덱스를 업데이트\n\n    // 언어 코드 설정\n    let language = '';\n    if (index === 0) {\n      language = 'ko'; // 한국어\n    } else if (index === 1) {\n      language = 'en'; // 영어\n    } else if (index === 2) {\n      language = 'ch'; // 중국어\n    }\n    i18n.changeLanguage(language); // 언어 변경 함수 호출\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      fontFamily: 'NanumBarunGothic'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filters\",\n      children: [\"한국어\", \"English\", \"中國語\"].map((number, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: selectedButtonIndex === index ? \"selected_filter_button\" : \"filter_button\",\n        onClick: () => handleButtonClick(index),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"font\",\n          children: number\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n_s(FilterButtons, \"fn9AByQprNV1aaLtq4Xd75iPtHU=\");\n_c = FilterButtons;\nexport default FilterButtons;\nvar _c;\n$RefreshReg$(_c, \"FilterButtons\");","map":{"version":3,"names":["React","useState","useTranslation","i18n","jsxDEV","_jsxDEV","FilterButtons","_s","selectedButtonIndex","setSelectedButtonIndex","handleButtonClick","index","language","changeLanguage","style","fontFamily","children","className","map","number","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/p_kxn_g/Documents/GitHub/awes0514/src/language/LanSelection.js"],"sourcesContent":["import React, { useState } from 'react';\nimport \"../recommend/FilterButtons.css\";\nimport \"../App.css\";\nimport \"../Home.css\"\nimport { useTranslation } from 'react-i18next';\nimport i18n from \"../locales/i18n.ts\";\n\nconst FilterButtons = () => {\n  // 현재 선택된 버튼의 인덱스를 추적하는 상태 변수\n  const [selectedButtonIndex, setSelectedButtonIndex] = useState(null);\n\n  const handleButtonClick = (index) => {\n    setSelectedButtonIndex(index); // 선택된 버튼의 인덱스를 업데이트\n    \n    // 언어 코드 설정\n    let language = '';\n    if (index === 0) {\n      language = 'ko'; // 한국어\n    } else if (index === 1) {\n      language = 'en'; // 영어\n    } else if (index === 2) {\n      language = 'ch'; // 중국어\n    }\n  \n    i18n.changeLanguage(language);  // 언어 변경 함수 호출\n  };\n  \n  return (\n    <div style={{ fontFamily: 'NanumBarunGothic' }}>\n\n    <div className=\"filters\">\n      {[\"한국어\", \"English\", \"中國語\"].map((number, index) => (\n        <button\n          key={index}\n          className={selectedButtonIndex === index ? \"selected_filter_button\" : \"filter_button\"}\n          onClick={() => handleButtonClick(index)}\n        >\n          <div className='font'>{number}</div>\n        </button>\n      ))}\n    </div>\n    </div>\n  );\n};\n\nexport default FilterButtons;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,gCAAgC;AACvC,OAAO,YAAY;AACnB,OAAO,aAAa;AACpB,SAASC,cAAc,QAAQ,eAAe;AAC9C,OAAOC,IAAI,MAAM,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B;EACA,MAAM,CAACC,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAEpE,MAAMS,iBAAiB,GAAIC,KAAK,IAAK;IACnCF,sBAAsB,CAACE,KAAK,CAAC,CAAC,CAAC;;IAE/B;IACA,IAAIC,QAAQ,GAAG,EAAE;IACjB,IAAID,KAAK,KAAK,CAAC,EAAE;MACfC,QAAQ,GAAG,IAAI,CAAC,CAAC;IACnB,CAAC,MAAM,IAAID,KAAK,KAAK,CAAC,EAAE;MACtBC,QAAQ,GAAG,IAAI,CAAC,CAAC;IACnB,CAAC,MAAM,IAAID,KAAK,KAAK,CAAC,EAAE;MACtBC,QAAQ,GAAG,IAAI,CAAC,CAAC;IACnB;IAEAT,IAAI,CAACU,cAAc,CAACD,QAAQ,CAAC,CAAC,CAAE;EAClC,CAAC;EAED,oBACEP,OAAA;IAAKS,KAAK,EAAE;MAAEC,UAAU,EAAE;IAAmB,CAAE;IAAAC,QAAA,eAE/CX,OAAA;MAAKY,SAAS,EAAC,SAAS;MAAAD,QAAA,EACrB,CAAC,KAAK,EAAE,SAAS,EAAE,KAAK,CAAC,CAACE,GAAG,CAAC,CAACC,MAAM,EAAER,KAAK,kBAC3CN,OAAA;QAEEY,SAAS,EAAET,mBAAmB,KAAKG,KAAK,GAAG,wBAAwB,GAAG,eAAgB;QACtFS,OAAO,EAAEA,CAAA,KAAMV,iBAAiB,CAACC,KAAK,CAAE;QAAAK,QAAA,eAExCX,OAAA;UAAKY,SAAS,EAAC,MAAM;UAAAD,QAAA,EAAEG;QAAM;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM;MAAC,GAJ/Bb,KAAK;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKJ,CACT;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEV,CAAC;AAACjB,EAAA,CApCID,aAAa;AAAAmB,EAAA,GAAbnB,aAAa;AAsCnB,eAAeA,aAAa;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}