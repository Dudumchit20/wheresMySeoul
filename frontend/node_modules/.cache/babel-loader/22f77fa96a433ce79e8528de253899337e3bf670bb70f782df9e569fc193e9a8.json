{"ast":null,"code":"var _jsxFileName = \"/Users/p_kxn_g/Documents/GitHub/wheresMySeoul/frontend/awes/src/TextField.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { setKey, fromLatLng, fromAddress } from 'react-geocode';\nimport WeatherComponent from './weather/weather';\nimport './TextField.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GOOGLE_MAPS_API_KEY = 'AIzaSyCoBqm6ZJlc2QRPAEZ8Op36nAklnfj5DsE'; // Replace with your actual key\nconst SEOUL_OPEN_DATA_AUTH_KEY = \"515653596b79756a38384a77506645\"; // 서울 열린 데이터\nsetKey(GOOGLE_MAPS_API_KEY);\n// 관광지 데이터: 관광지 이름과 좌표를 포함\nconst touristSpots = [{\n  name: \"강남 MICE 관광특구\",\n  latitude: 37.5139,\n  longitude: 127.0581\n}, {\n  name: \"동대문 관광특구\",\n  latitude: 37.5711,\n  longitude: 127.0094\n}, {\n  name: \"명동 관광특구\",\n  latitude: 37.5637,\n  longitude: 126.9857\n}, {\n  name: \"이태원 관광특구\",\n  latitude: 37.5345,\n  longitude: 126.9937\n}\n// ... 추가적인 지역을 여기에 리스트업\n];\n\n// 좌표 간 거리를 계산하는 함수 (haversine formula)\nfunction calculateDistance(lat1, lon1, lat2, lon2) {\n  const R = 6371; // 지구 반경 (km)\n  const dLat = (lat2 - lat1) * (Math.PI / 180);\n  const dLon = (lon2 - lon1) * (Math.PI / 180);\n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1 * (Math.PI / 180)) * Math.cos(lat2 * (Math.PI / 180)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c; // 거리 (km)\n}\nfunction findClosestTouristSpot(latitude, longitude) {\n  let closestSpot = touristSpots[0];\n  let minDistance = calculateDistance(latitude, longitude, closestSpot.latitude, closestSpot.longitude);\n  for (const spot of touristSpots) {\n    const distance = calculateDistance(latitude, longitude, spot.latitude, spot.longitude);\n    if (distance < minDistance) {\n      closestSpot = spot;\n      minDistance = distance;\n    }\n  }\n  return closestSpot;\n}\nfunction LocationSearchField() {\n  _s();\n  const [inputValue, setInputValue] = useState('');\n  const [weatherData, setWeatherData] = useState(null);\n  const [currentLocation, setCurrentLocation] = useState('');\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        const closestSpot = findClosestTouristSpot(latitude, longitude);\n        fetchWeatherData(closestSpot.name);\n        setCurrentLocation(closestSpot.name);\n      }, error => console.error('Geolocation error:', error));\n    }\n  }, []);\n  const fetchWeatherData = async spotName => {\n    try {\n      const response = await fetch(`http://openapi.seoul.go.kr:8088/${SEOUL_OPEN_DATA_AUTH_KEY}/json/citydata/1/5/${spotName}`);\n      const data = await response.json();\n      setWeatherData(data);\n    } catch (error) {\n      console.error('Error fetching weather data:', error);\n    }\n  };\n  const handleSearch = () => {\n    fromAddress(inputValue).then(({\n      results\n    }) => {\n      if (results && results.length > 0) {\n        const location = results[0].geometry.location;\n        const closestSpot = findClosestTouristSpot(location.lat, location.lng);\n        fetchWeatherData(closestSpot.name);\n        setCurrentLocation(closestSpot.name);\n      } else {\n        setCurrentLocation('주소를 찾지 못했습니다.');\n      }\n    }).catch(error => {\n      console.error('Geocoding error:', error);\n      setCurrentLocation('주소를 찾지 못했습니다.');\n    });\n  };\n  const handleChange = event => setInputValue(event.target.value);\n  const handleKeyPress = event => {\n    if (event.key === 'Enter') {\n      handleSearch();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"textfield_container\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: inputValue,\n      onChange: handleChange,\n      onKeyPress: handleKeyPress,\n      placeholder: \"Search for a location\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Closest Spot: \", currentLocation]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), weatherData && /*#__PURE__*/_jsxDEV(WeatherComponent, {\n      weatherData: weatherData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n}\n_s(LocationSearchField, \"M8Ic3YENmkSBlje8+tHK86NQtFE=\");\n_c = LocationSearchField;\nexport default LocationSearchField;\nvar _c;\n$RefreshReg$(_c, \"LocationSearchField\");","map":{"version":3,"names":["React","useState","useEffect","setKey","fromLatLng","fromAddress","WeatherComponent","jsxDEV","_jsxDEV","GOOGLE_MAPS_API_KEY","SEOUL_OPEN_DATA_AUTH_KEY","touristSpots","name","latitude","longitude","calculateDistance","lat1","lon1","lat2","lon2","R","dLat","Math","PI","dLon","a","sin","cos","c","atan2","sqrt","findClosestTouristSpot","closestSpot","minDistance","spot","distance","LocationSearchField","_s","inputValue","setInputValue","weatherData","setWeatherData","currentLocation","setCurrentLocation","navigator","geolocation","getCurrentPosition","position","coords","fetchWeatherData","error","console","spotName","response","fetch","data","json","handleSearch","then","results","length","location","geometry","lat","lng","catch","handleChange","event","target","value","handleKeyPress","key","className","children","type","onChange","onKeyPress","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/p_kxn_g/Documents/GitHub/wheresMySeoul/frontend/awes/src/TextField.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { setKey, fromLatLng, fromAddress } from 'react-geocode';\nimport WeatherComponent from './weather/weather';\nimport './TextField.css';\n\nconst GOOGLE_MAPS_API_KEY = 'AIzaSyCoBqm6ZJlc2QRPAEZ8Op36nAklnfj5DsE'; // Replace with your actual key\nconst SEOUL_OPEN_DATA_AUTH_KEY = \"515653596b79756a38384a77506645\" // 서울 열린 데이터\nsetKey(GOOGLE_MAPS_API_KEY);\n// 관광지 데이터: 관광지 이름과 좌표를 포함\nconst touristSpots = [\n  { name: \"강남 MICE 관광특구\", latitude: 37.5139, longitude: 127.0581 },\n  { name: \"동대문 관광특구\", latitude: 37.5711, longitude: 127.0094 },\n  { name: \"명동 관광특구\", latitude: 37.5637, longitude: 126.9857 },\n  { name: \"이태원 관광특구\", latitude: 37.5345, longitude: 126.9937 },\n  // ... 추가적인 지역을 여기에 리스트업\n];\n\n// 좌표 간 거리를 계산하는 함수 (haversine formula)\nfunction calculateDistance(lat1, lon1, lat2, lon2) {\n  const R = 6371; // 지구 반경 (km)\n  const dLat = (lat2 - lat1) * (Math.PI / 180);\n  const dLon = (lon2 - lon1) * (Math.PI / 180);\n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n            Math.cos(lat1 * (Math.PI / 180)) * Math.cos(lat2 * (Math.PI / 180)) *\n            Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c; // 거리 (km)\n}\n\nfunction findClosestTouristSpot(latitude, longitude) {\n  let closestSpot = touristSpots[0];\n  let minDistance = calculateDistance(latitude, longitude, closestSpot.latitude, closestSpot.longitude);\n\n  for (const spot of touristSpots) {\n    const distance = calculateDistance(latitude, longitude, spot.latitude, spot.longitude);\n    if (distance < minDistance) {\n      closestSpot = spot;\n      minDistance = distance;\n    }\n  }\n\n  return closestSpot;\n}\n\nfunction LocationSearchField() {\n  const [inputValue, setInputValue] = useState('');\n  const [weatherData, setWeatherData] = useState(null);\n  const [currentLocation, setCurrentLocation] = useState('');\n\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const { latitude, longitude } = position.coords;\n          const closestSpot = findClosestTouristSpot(latitude, longitude);\n          fetchWeatherData(closestSpot.name);\n          setCurrentLocation(closestSpot.name);\n        },\n        (error) => console.error('Geolocation error:', error)\n      );\n    }\n  }, []);\n\n  const fetchWeatherData = async (spotName) => {\n    try {\n      const response = await fetch(`http://openapi.seoul.go.kr:8088/${SEOUL_OPEN_DATA_AUTH_KEY}/json/citydata/1/5/${spotName}`);\n      const data = await response.json();\n      setWeatherData(data);\n    } catch (error) {\n      console.error('Error fetching weather data:', error);\n    }\n  };\n\n  const handleSearch = () => {\n    fromAddress(inputValue)\n      .then(({ results }) => {\n        if (results && results.length > 0) {\n          const location = results[0].geometry.location;\n          const closestSpot = findClosestTouristSpot(location.lat, location.lng);\n          fetchWeatherData(closestSpot.name);\n          setCurrentLocation(closestSpot.name);\n        } else {\n          setCurrentLocation('주소를 찾지 못했습니다.');\n        }\n      })\n      .catch((error) => {\n        console.error('Geocoding error:', error);\n        setCurrentLocation('주소를 찾지 못했습니다.');\n      });\n  };\n\n  const handleChange = (event) => setInputValue(event.target.value);\n\n  const handleKeyPress = (event) => {\n    if (event.key === 'Enter') {\n      handleSearch();\n    }\n  };\n\n  return (\n    <div className=\"textfield_container\">\n      <input\n        type=\"text\"\n        value={inputValue}\n        onChange={handleChange}\n        onKeyPress={handleKeyPress}\n        placeholder=\"Search for a location\"\n      />\n      <div>Closest Spot: {currentLocation}</div>\n      {weatherData && <WeatherComponent weatherData={weatherData} />}\n    </div>\n  );\n}\n\nexport default LocationSearchField;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}