{"ast":null,"code":"var _jsxFileName = \"/Users/p_kxn_g/Documents/GitHub/wheresMySeoul/frontend/awes/src/TextField.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { setKey, fromLatLng, fromAddress } from 'react-geocode';\nimport WeatherComponent from './weather/weather';\nimport './TextField.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GOOGLE_MAPS_API_KEY = 'AIzaSyCoBqm6ZJlc2QRPAEZ8Op36nAklnfj5DsE'; // Replace with your actual key\nconst YOUR_AUTH_KEY = \"515653596b79756a38384a77506645\"; // 서울 열린 데이터\nsetKey(GOOGLE_MAPS_API_KEY);\n// 관광지 데이터: 관광지 이름과 좌표를 포함\nconst touristSpots = [{\n  name: \"강남 MICE 관광특구\",\n  latitude: 37.5139,\n  longitude: 127.0581\n}, {\n  name: \"동대문 관광특구\",\n  latitude: 37.5711,\n  longitude: 127.0094\n}, {\n  name: \"명동 관광특구\",\n  latitude: 37.5637,\n  longitude: 126.9857\n}, {\n  name: \"이태원 관광특구\",\n  latitude: 37.5345,\n  longitude: 126.9937\n}\n// ... 추가적인 지역을 여기에 리스트업\n];\nfunction LocationSearchField() {\n  _s();\n  const inputStyle = {\n    color: 'black',\n    border: '0px solid gray',\n    borderRadius: '5px',\n    width: '100%',\n    height: '40px',\n    margin: '0px 10px',\n    outline: 'none'\n  };\n  const textFieldStyle = {\n    flex: 1,\n    fontSize: '20px',\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center'\n  };\n  const [inputValue, setInputValue] = useState('');\n  const [currentLocation, setCurrentLocation] = useState('');\n  const [searchResults, setSearchResults] = useState([]); // Changed to an array to store multiple results\n  // 날씨\n  const [weatherData, setWeatherData] = useState(null);\n\n  // Get current location\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        fromLatLng(latitude, longitude).then(({\n          results\n        }) => {\n          if (results && results.length > 0) {\n            const address = results[0].formatted_address;\n            setCurrentLocation(address);\n            setInputValue(address);\n          } else {\n            setInputValue('Unable to find address.');\n          }\n        }).catch(error => {\n          console.error('Geocoding error:', error);\n          setInputValue('Geocoding error.');\n        });\n      }, error => {\n        console.error('Geolocation error:', error);\n        setInputValue('Location access denied.');\n      });\n    } else {\n      setInputValue('Geolocation not supported.');\n    }\n  }, []);\n  const handleSearch = async () => {\n    fromAddress(inputValue).then(({\n      results\n    }) => {\n      if (results && results.length > 0) {\n        setSearchResults(results);\n      } else {\n        setSearchResults([{\n          formatted_address: '주소를 찾지 못했습니다.'\n        }]);\n      }\n    }).catch(error => {\n      console.error('Geocoding error:', error);\n      setSearchResults([{\n        formatted_address: '주소를 찾지 못했습니다.'\n      }]);\n    });\n    try {\n      const response = await fetch(`http://openapi.seoul.go.kr:8088/${YOUR_AUTH_KEY}/json/citydata/1/5/${inputValue}`);\n      const data = await response.json();\n      const {\n        temperature,\n        precipitation,\n        humidity,\n        windSpeed\n      } = data; // 이 데이터는 실제로 받아오는 응답에 맞게 변경해야 합니다.\n      setWeatherData({\n        temperature,\n        precipitation,\n        humidity,\n        windSpeed\n      });\n    } catch (error) {\n      console.error('Error fetching weather data:', error);\n    }\n  };\n  const handleChange = event => {\n    setInputValue(event.target.value);\n  };\n\n  // Execute search on Enter key press\n  const handleKeyPress = event => {\n    if (event.key === 'Enter') {\n      handleSearch();\n    }\n  };\n  const handleClear = () => {\n    setInputValue('');\n    setCurrentLocation('');\n    setSearchResults([]);\n  };\n\n  // When a suggestion is clicked, set it as the search input value\n  const handleSuggestionClick = address => {\n    setInputValue(address);\n    setSearchResults([]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"textfield_container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"location_button\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button_none\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"/png/search.png\",\n          alt: \"search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: textFieldStyle,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: inputValue,\n          onChange: handleChange,\n          onKeyPress: handleKeyPress,\n          style: inputStyle,\n          placeholder: \"\\uD604\\uC7AC \\uC704\\uCE58 \\uD639\\uC740 \\uC6D0\\uD558\\uB294 \\uC704\\uCE58\\uB97C \\uAC80\\uC0C9\\uD574\\uBCF4\\uC138\\uC694\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button_none\",\n          onClick: handleClear,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"/png/close.png\",\n            alt: \"close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), searchResults.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"results_dropdown\",\n      children: searchResults.map((result, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"result_row\",\n        onClick: result.formatted_address !== '주소를 찾지 못했습니다.' ? () => handleSuggestionClick(result.formatted_address) : null,\n        children: result.formatted_address\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }, this), weatherData && /*#__PURE__*/_jsxDEV(WeatherComponent, {\n      temperature: weatherData.temperature,\n      precipitation: weatherData.precipitation,\n      humidity: weatherData.humidity,\n      windSpeed: weatherData.windSpeed\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 15\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n}\n_s(LocationSearchField, \"qW4x1shkzGprx7VNmaNQ19ptVCQ=\");\n_c = LocationSearchField;\nexport default LocationSearchField;\nvar _c;\n$RefreshReg$(_c, \"LocationSearchField\");","map":{"version":3,"names":["React","useState","useEffect","setKey","fromLatLng","fromAddress","WeatherComponent","jsxDEV","_jsxDEV","GOOGLE_MAPS_API_KEY","YOUR_AUTH_KEY","touristSpots","name","latitude","longitude","LocationSearchField","_s","inputStyle","color","border","borderRadius","width","height","margin","outline","textFieldStyle","flex","fontSize","display","flexDirection","alignItems","inputValue","setInputValue","currentLocation","setCurrentLocation","searchResults","setSearchResults","weatherData","setWeatherData","navigator","geolocation","getCurrentPosition","position","coords","then","results","length","address","formatted_address","catch","error","console","handleSearch","response","fetch","data","json","temperature","precipitation","humidity","windSpeed","handleChange","event","target","value","handleKeyPress","key","handleClear","handleSuggestionClick","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","style","type","onChange","onKeyPress","placeholder","onClick","map","result","index","_c","$RefreshReg$"],"sources":["/Users/p_kxn_g/Documents/GitHub/wheresMySeoul/frontend/awes/src/TextField.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { setKey, fromLatLng, fromAddress } from 'react-geocode';\nimport WeatherComponent from './weather/weather';\nimport './TextField.css';\n\nconst GOOGLE_MAPS_API_KEY = 'AIzaSyCoBqm6ZJlc2QRPAEZ8Op36nAklnfj5DsE'; // Replace with your actual key\nconst YOUR_AUTH_KEY = \"515653596b79756a38384a77506645\" // 서울 열린 데이터\nsetKey(GOOGLE_MAPS_API_KEY);\n// 관광지 데이터: 관광지 이름과 좌표를 포함\nconst touristSpots = [\n  { name: \"강남 MICE 관광특구\", latitude: 37.5139, longitude: 127.0581 },\n  { name: \"동대문 관광특구\", latitude: 37.5711, longitude: 127.0094 },\n  { name: \"명동 관광특구\", latitude: 37.5637, longitude: 126.9857 },\n  { name: \"이태원 관광특구\", latitude: 37.5345, longitude: 126.9937 },\n  // ... 추가적인 지역을 여기에 리스트업\n];\n\n\nfunction LocationSearchField() {\n  const inputStyle = {\n    color: 'black',\n    border: '0px solid gray',\n    borderRadius: '5px',\n    width: '100%',\n    height: '40px',\n    margin: '0px 10px',\n    outline: 'none',\n  };\n\n  const textFieldStyle = {\n    flex: 1,\n    fontSize: '20px',\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n  };\n\n  const [inputValue, setInputValue] = useState('');\n  const [currentLocation, setCurrentLocation] = useState('');\n  const [searchResults, setSearchResults] = useState([]); // Changed to an array to store multiple results\n  // 날씨\n  const [weatherData, setWeatherData] = useState(null);\n\n\n  // Get current location\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const { latitude, longitude } = position.coords;\n          fromLatLng(latitude, longitude)\n            .then(({ results }) => {\n              if (results && results.length > 0) {\n                const address = results[0].formatted_address;\n                setCurrentLocation(address);\n                setInputValue(address);\n              } else {\n                setInputValue('Unable to find address.');\n              }\n            })\n            .catch((error) => {\n              console.error('Geocoding error:', error);\n              setInputValue('Geocoding error.');\n            });\n        },\n        (error) => {\n          console.error('Geolocation error:', error);\n          setInputValue('Location access denied.');\n        }\n      );\n    } else {\n      setInputValue('Geolocation not supported.');\n    }\n  }, []);\n\n  const handleSearch = async() => {\n    fromAddress(inputValue)\n      .then(({ results }) => {\n        if (results && results.length > 0) {\n          setSearchResults(results);\n        } else {\n          setSearchResults([{ formatted_address: '주소를 찾지 못했습니다.' }]);\n        }\n      })\n      .catch((error) => {\n        console.error('Geocoding error:', error);\n        setSearchResults([{ formatted_address: '주소를 찾지 못했습니다.' }]);\n      });\n\n    try {\n      const response = await fetch(`http://openapi.seoul.go.kr:8088/${YOUR_AUTH_KEY}/json/citydata/1/5/${inputValue}`);\n      const data = await response.json();\n      const { temperature, precipitation, humidity, windSpeed } = data; // 이 데이터는 실제로 받아오는 응답에 맞게 변경해야 합니다.\n      setWeatherData({ temperature, precipitation, humidity, windSpeed });\n    } catch (error) {\n      console.error('Error fetching weather data:', error);\n    }\n\n  };\n\n  const handleChange = (event) => {\n    setInputValue(event.target.value);\n  };\n\n  // Execute search on Enter key press\n  const handleKeyPress = (event) => {\n    if (event.key === 'Enter') {\n      handleSearch();\n    }\n  };\n\n  const handleClear = () => {\n    setInputValue('');\n    setCurrentLocation('');\n    setSearchResults([]);\n  };\n\n  // When a suggestion is clicked, set it as the search input value\n  const handleSuggestionClick = (address) => {\n    setInputValue(address);\n    setSearchResults([]);\n  };\n\n  return (\n    <div className='textfield_container'>\n      <div className=\"location_button\">\n        <button className=\"button_none\">\n          <img src=\"/png/search.png\" alt=\"search\" />\n        </button>\n        <div style={textFieldStyle}>\n          <input\n            type=\"text\"\n            value={inputValue}\n            onChange={handleChange}\n            onKeyPress={handleKeyPress}\n            style={inputStyle}\n            placeholder=\"현재 위치 혹은 원하는 위치를 검색해보세요\"\n          />\n          <button className=\"button_none\" onClick={handleClear}>\n            <img src=\"/png/close.png\" alt=\"close\" />\n          </button>\n        </div>\n      </div>\n     \n      {/* Display search results */}\n      {searchResults.length > 0 && (\n        <div className=\"results_dropdown\">\n          {searchResults.map((result, index) => (\n            <div\n              key={index}\n              className=\"result_row\"\n              onClick={\n                result.formatted_address !== '주소를 찾지 못했습니다.' ? () => handleSuggestionClick(result.formatted_address) : null\n              }\n            >\n              {result.formatted_address}\n            </div>\n          ))}\n        </div>\n      )}\n            {weatherData && (\n              <WeatherComponent\n                temperature={weatherData.temperature}\n                precipitation={weatherData.precipitation}\n                humidity={weatherData.humidity}\n                windSpeed={weatherData.windSpeed}\n              />\n            )}\n    </div>\n  );\n}\n\nexport default LocationSearchField;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}